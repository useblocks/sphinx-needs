[tool.poetry]
name = "sphinx-needs"

# !! Don't miss updates in sphinx_needs.__version__, changelog.rst, and .github/workflows/docker !!!
version = "4.1.0"

description = "Sphinx needs extension for managing needs/requirements and specifications"
authors = ["team useblocks <info@useblocks.com>"]
license = "MIT"
readme = "README.rst"
repository = "http://github.com/useblocks/sphinx-needs"
documentation = "https://sphinx-needs.readthedocs.io/en/latest/"
classifiers=[
        'Development Status :: 5 - Production/Stable',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: MIT License',
        'Operating System :: OS Independent',
        'Programming Language :: Python',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: 3.9',
        'Programming Language :: Python :: 3.10',
        'Programming Language :: Python :: 3.11',
        'Topic :: Documentation',
        'Topic :: Utilities',
        'Framework :: Sphinx :: Extension',
    ]

packages = [
    {include = "sphinx_needs"}
]

# [project.dependencies]
[tool.poetry.dependencies]
python = ">=3.8,<4"
sphinx = ">=6.0,<9"
requests-file = "^2.1"  # external links
requests = "^2.32"  # external_links
jsonschema = ">=3.2.0"  # needsimport schema validation
sphinx-data-viewer = "^0.1.5"  # needservice debug output
sphinxcontrib-jquery = "^4"  # needed for datatables in sphinx>=6
tomli = { version = "*", python = "<3.11" }

# [project.optional-dependencies.plotting]
# for needpie / needbar
matplotlib = { version = ">=3.3.0", optional = true }

# [project.optional-dependencies.test]
pytest = { version = "^7", optional = true }
pytest-cov = { version = "^4", optional = true }
lxml = { version = "^4.6.5", optional = true }
responses = { version = "^0.22.0", optional = true }
sphinxcontrib-plantuml = { version = "^0", optional = true }
syrupy = { version = "^3", optional = true }
pytest-xprocess = { version = "^0.22.2", optional = true }
defusedxml = { version = "^0.7.1", optional = true }

# [project.optional-dependencies.test-parallel]
pytest-xdist = { version = "*", optional = true }

# [project.optional-dependencies.benchmark]
pytest-benchmark = { version = "^4.0.0", optional = true }
memray = { version = "^1.3.1", optional = true }

# [project.optional-dependencies.docs]
sphinx-copybutton = { version="^0.5", optional = true }
sphinxcontrib-programoutput = { version="^0.17", optional = true }
sphinx-design = { version="^0.6", optional = true }

# [project.optional-dependencies.theme-im]
sphinx-immaterial = { version="^0.11.11", optional = true }
# [project.optional-dependencies.theme-furo]
furo = { version="^2024.8.6", optional = true }
# [project.optional-dependencies.theme-pds]
pydata-sphinx-theme = { version="^0.15.2", optional = true }
# [project.optional-dependencies.theme-rtd]
sphinx_rtd_theme = { version="^2.0.0", optional = true }

[tool.poetry.extras]
plotting = ["matplotlib"]
test = [
  "defusedxml",
  "matplotlib",
  "pytest",
  "pytest-cov",
  "syrupy",
  "sphinxcontrib-plantuml",
  "lxml",
  "responses",
  "pytest-xprocess"
]
test-parallel = ["pytest-xdist"]
benchmark = ["pytest-benchmark", "memray"]
docs = [
  "matplotlib",
  "sphinxcontrib-plantuml",
  "sphinx-copybutton",
  "sphinxcontrib-programoutput",
  "sphinx-design",
]
theme-im = ["sphinx-immaterial"]
theme-furo = ["furo"]
theme-pds = ["pydata-sphinx-theme"]
theme-rtd = ["sphinx_rtd_theme"]

[tool.poetry.dev-dependencies]
pre-commit = "^3"

[tool.pytest.ini_options]
markers = [
    "jstest: marks tests as JavaScript test (deselect with '-m \"not jstest\"')",
]
filterwarnings = [
  "ignore:.*removed in Python 3.14.*:DeprecationWarning",
  "ignore::PendingDeprecationWarning:sphinx_data_viewer.*",
]


[tool.ruff.lint]
extend-select = [
  "B",   # flake8-bugbear  
  "C4",  # flake8-comprehensions
  "I",   # isort
  "ICN", # flake8-import-conventions
  "ISC", # flake8-implicit-str-concat
  "N",   # pep8-naming
  "RUF", # Ruff-specific rules
  "SIM", # flake8-simplify
  "UP",  # pyupgrade
]
extend-ignore = ["B904", "ISC001", "ICN001", "N818", "RUF012"]

[tool.mypy]
files = "sphinx_needs"
strict = true
show_error_codes = true
implicit_reexport = false
namespace_packages = true
disallow_any_generics = true
disallow_subclassing_any = true
# disallow_any_unimported = true
# disallow_any_explicit = true
# disallow_any_expr = true
# disallow_any_decorated = true

[[tool.mypy.overrides]]
module = [
  "matplotlib.*",
  "numpy.*",
  "requests_file",
  "sphinx_data_viewer.*",
  "sphinxcontrib.plantuml.*",
  "tomllib.*",
  "tomli.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
  "sphinx_needs.directives.needextend",
  "sphinx_needs.functions.functions",
  "sphinx_needs.api.need",
]
# TODO dynamically overriding TypeDict keys is a bit tricky
disable_error_code = "literal-required"

[[tool.mypy.overrides]]
module = [
  "sphinx_needs.data"
]
disable_error_code = ["attr-defined", "no-any-return"]

[[tool.mypy.overrides]]
module = ["sphinx_needs.needs"]
# issue with importing tomllib/tomli based on python version
disable_error_code = ["no-redef"]

[build-system]
requires = ["setuptools", "poetry_core>=1.0.8"]  # setuptools for deps like plantuml
build-backend = "poetry.core.masonry.api"

[tool.tox]
# To use tox, see https://tox.readthedocs.io
# $ pipx install tox
# it is suggested to use with https://github.com/tox-dev/tox-uv or https://github.com/tox-dev/tox-conda
# $ pipx inject tox tox-uv

legacy_tox_ini = """
[tox]
envlist = py38

[testenv]
usedevelop = true

[testenv:py{38,39,310,311,312}]
extras =
  test
  test-parallel
commands =
  pytest --ignore tests/benchmarks {posargs:tests}

[testenv:docs-{alabaster,furo,im,pds,rtd}]
extras = 
  docs
  furo: theme-furo
  im: theme-im
  pds: theme-pds
  rtd: theme-rtd
passenv =
    BUILDER
    CLEAN
    READTHEDOCS
    TERM
setenv =
    alabaster: DOCS_THEME=alabaster
    furo: DOCS_THEME=furo
    im: DOCS_THEME=sphinx_immaterial
    pds: DOCS_THEME=pydata_sphinx_theme
    rtd: DOCS_THEME=sphinx_rtd_theme
commands_pre =
  python -c "import shutil; shutil.rmtree('docs/_build/{env:BUILDER:html}/{env:DOCS_THEME:}', ignore_errors=True) if '{env:CLEAN:}' else None"
commands = 
  sphinx-build -nW --keep-going -b {env:BUILDER:html} docs/ docs/_build/{env:BUILDER:html}/{env:DOCS_THEME:} {posargs:-T}
"""
