"""SN extension for schema validation."""

from __future__ import annotations

from typing import Any, cast

from jsonschema import Draft202012Validator, FormatChecker, ValidationError

from sphinx_needs.config import NeedsSphinxConfig
from sphinx_needs.data import NeedsInfoType
from sphinx_needs.schema.config import (
    MAP_RULE_DEFAULT_SEVERITY,
    MAX_NESTED_NETWORK_VALIDATION_LEVELS,
    MessageRuleEnum,
    NeedFieldsSchemaType,
    NeedFieldsSchemaWithVersionType,
    SchemasRootType,
    SeverityEnum,
    ValidateSchemaType,
)
from sphinx_needs.schema.config_utils import get_schema_name
from sphinx_needs.schema.reporting import (
    OntologyWarning,
    ValidateNeedMessageType,
    ValidateNeedType,
    filter_warnings_severity,
    save_debug_files,
)
from sphinx_needs.schema.utils import get_properties_from_schema
from sphinx_needs.views import NeedsView

# TODO(Marco): error for conflicting unevaluatedProperties


_schema_version = "https://json-schema.org/draft/2020-12/schema"
"""
JSON schema metaversion to use.

The implementation requires at least draft 2019-09 as unevaluatedProperties was added there.
"""

_extra_option_schemas: NeedFieldsSchemaType = {
    "type": "object",
    "properties": {},
}
"""
Combined static schema information for all extra options.

This is valid for all need types and conditions.
"""

_extra_link_schemas: NeedFieldsSchemaType = {
    "type": "object",
    "properties": {},
}
"""
Combined static schema information for all extra link options.

This is valid for all need types and conditions.
"""

_needs_schema: dict[str, Any] = {}
"""The needs schema as it would be written to needs.json, generated by generate_needs_schema()."""


def merge_static_schemas(config: NeedsSphinxConfig) -> bool:
    """
    Merge static extra_option.schema and extra_links.schema items.

    Goal is to have a single validation per need for these.
    Writes to the global _extra_option_schemas / _extra_link_schemas variables.
    """
    any_found = False
    extra_option_properties: NeedFieldsSchemaType = {"properties": {}}
    for name, option in config.extra_options.items():
        if option.schema is not None:
            any_found = True
            extra_option_properties["properties"][name] = option.schema
    _extra_option_schemas["properties"] = extra_option_properties["properties"]

    extra_link_properties: NeedFieldsSchemaType = {"properties": {}}
    for link in config.extra_links:
        if "schema" in link and link["schema"] is not None:
            any_found = True
            extra_link_properties["properties"][link["option"]] = link["schema"]
    _extra_link_schemas["properties"] = extra_link_properties["properties"]
    return any_found


def validate_need(
    config: NeedsSphinxConfig,
    need: NeedsInfoType,
    needs: NeedsView,
    type_schemas: list[SchemasRootType],
) -> list[OntologyWarning]:
    """
    Validate a single need against all extra option, link option and type schemas.

    The loop creates reports of type ReportSingleType that follow the schema
    definition structure. The reports are then converted to
    NestedWarningType objects presented to the user.
    """
    all_warnings: list[OntologyWarning] = []

    if _extra_option_schemas.get("properties"):
        # check schemas of extra options and extra links for the need
        new_warnings_options = get_ontology_warnings(
            config,
            need,
            _extra_option_schemas,
            fail_rule=MessageRuleEnum.extra_option_fail,
            success_rule=MessageRuleEnum.extra_option_success,
            schema_path=["extra_options", "schema"],
            need_path=[need["id"]],
        )
        save_debug_files(config, new_warnings_options)
        all_warnings.extend(filter_warnings_severity(config, new_warnings_options))

    if _extra_link_schemas.get("properties"):
        new_warnings_links = get_ontology_warnings(
            config,
            need,
            _extra_link_schemas,
            fail_rule=MessageRuleEnum.extra_link_fail,
            success_rule=MessageRuleEnum.extra_link_success,
            schema_path=["extra_links", "schema"],
            need_path=[need["id"]],
        )
        save_debug_files(config, new_warnings_links)
        all_warnings.extend(filter_warnings_severity(config, new_warnings_links))

    for type_schema in type_schemas:
        # maintain state for nested network validation
        schema_name = get_schema_name(type_schema)
        if type_schema.get("select"):
            new_warnings_select = get_ontology_warnings(
                config,
                need,
                cast(NeedFieldsSchemaType, type_schema["select"]),
                fail_rule=MessageRuleEnum.select_fail,
                success_rule=MessageRuleEnum.select_success,
                schema_path=[schema_name, "select"],
                need_path=[need["id"]],
            )
            save_debug_files(config, new_warnings_select)
            # filter warnings not required as select has severity none
            if any_not_of_rule(new_warnings_select, MessageRuleEnum.select_success):
                # need is not selected
                continue

        user_severity = (
            SeverityEnum[type_schema["severity"]] if "severity" in type_schema else None
        )
        local_network_schema: ValidateSchemaType = {}
        if "local" in type_schema["validate"]:
            local_network_schema["local"] = type_schema["validate"]["local"]
        if "network" in type_schema["validate"]:
            local_network_schema["network"] = type_schema["validate"]["network"]
        _, new_warnings_recurse = recurse_validate_type_schmemas(
            config,
            need,
            needs,
            user_message=type_schema.get("message"),
            schema=local_network_schema,
            severity=user_severity,
            schema_path=[schema_name],
            need_path=[need["id"]],
            recurse_level=0,
        )
        all_warnings.extend(new_warnings_recurse)

    return all_warnings


def recurse_validate_type_schmemas(
    config: NeedsSphinxConfig,
    need: NeedsInfoType,
    needs: NeedsView,
    user_message: str | None,
    schema: ValidateSchemaType,
    schema_path: list[str],
    need_path: list[str],
    recurse_level: int,
    severity: SeverityEnum | None = None,
) -> tuple[bool, list[OntologyWarning]]:
    """
    Recursively validate a need against type schemas.

    The bool success bit indicates whether local and downstream validation were successful.
    The returned list of OntologyWarning objects contains warnings
    that are already filtered by user severity and can directly be used for user reporting.
    """
    if recurse_level > MAX_NESTED_NETWORK_VALIDATION_LEVELS:
        rule = MessageRuleEnum.network_max_nest_level
        warning: OntologyWarning = {
            "rule": rule,
            "severity": MAP_RULE_DEFAULT_SEVERITY[rule],
            "validation_message": (
                f"Maximum network validation recursion level {MAX_NESTED_NETWORK_VALIDATION_LEVELS} reached."
            ),
            "need": need,
            "schema_path": schema_path,
            "need_path": need_path,
        }
        if user_message is not None:
            warning["user_message"] = user_message
        return False, [warning]

    warnings: list[OntologyWarning] = []
    success = True
    if "local" in schema:
        rule_success = (
            MessageRuleEnum.local_success
            if recurse_level == 0
            else MessageRuleEnum.network_local_success
        )
        rule_fail = (
            MessageRuleEnum.local_fail
            if recurse_level == 0
            else MessageRuleEnum.network_local_fail
        )
        warnings_local = get_ontology_warnings(
            config,
            need,
            cast(NeedFieldsSchemaType, schema["local"]),  # refs were replaced already
            rule_fail,
            rule_success,
            schema_path=[*schema_path, "local"],
            need_path=need_path,
            user_message=user_message if recurse_level == 0 else None,
        )
        save_debug_files(config, warnings_local)
        warnings_local_filtered = filter_warnings_severity(
            config, warnings_local, severity
        )
        warnings.extend(warnings_local_filtered)
        if any_not_of_rule(warnings_local, rule_success):
            success = False
    if "network" in schema:
        for link_type, link_schema in schema["network"].items():
            items_targets_ok: list[str] = []
            """List of target need ids for items validation that passed."""
            items_targets_nok: list[str] = []
            """List of target need ids for items validation that failed."""
            items_warnings_per_target: dict[str, list[OntologyWarning]] = {}
            """Map of target need id to warnings for failed items validation."""
            contains_targets_ok: list[str] = []
            """List of target need ids for contains validation that passed."""
            contains_targets_nok: list[str] = []
            """List of target need ids for contains validation that failed."""
            contains_warnings_per_target: dict[str, list[OntologyWarning]] = {}
            """Map of target need id to warnings for failed contains validation."""
            for target_need_id in need[link_type]:  # type: ignore[literal-required]
                # collect all downstream warnings for broken links, items and contains
                # evaluation happens later
                try:
                    target_need = needs[target_need_id]
                except KeyError:
                    # target need does not exist (broken link)
                    rule = MessageRuleEnum.network_missing_target
                    msg = f"Broken link of type '{link_type}' to '{target_need_id}'"
                    # report it directly, it's not a minmax warning and the target need is ignored
                    # in the minmax checks
                    warnings.append(
                        {
                            "rule": rule,
                            "severity": get_severity(rule, severity),
                            "validation_message": msg,
                            "need": need,
                            "schema_path": [*schema_path, "network", link_type],
                            "need_path": [*need_path, link_type],
                        }
                    )
                    if recurse_level == 0 and user_message is not None:
                        warnings[-1]["user_message"] = user_message
                    continue

                # Handle items validation - all items must pass
                if link_schema.get("items"):
                    new_success, new_warnings = recurse_validate_type_schmemas(
                        config=config,
                        need=target_need,
                        needs=needs,
                        user_message=user_message,
                        schema=link_schema["items"],
                        schema_path=[*schema_path, link_type],
                        need_path=[*need_path, link_type, target_need_id],
                        recurse_level=recurse_level + 1,
                        severity=severity,
                    )
                    if new_success:
                        items_targets_ok.append(target_need_id)
                    else:
                        items_targets_nok.append(target_need_id)
                    items_warnings_per_target[target_need_id] = new_warnings
                else:
                    items_targets_ok.append(target_need_id)

                # Handle contains validation - at least some items must pass
                if link_schema.get("contains"):
                    new_success, new_warnings = recurse_validate_type_schmemas(
                        config=config,
                        need=target_need,
                        needs=needs,
                        user_message=user_message,
                        schema=link_schema["contains"],
                        schema_path=[*schema_path, link_type],
                        need_path=[*need_path, link_type, target_need_id],
                        recurse_level=recurse_level + 1,
                        severity=severity,
                    )
                    if new_success:
                        contains_targets_ok.append(target_need_id)
                    else:
                        contains_targets_nok.append(target_need_id)
                    contains_warnings_per_target[target_need_id] = new_warnings
                else:
                    contains_targets_ok.append(target_need_id)

            # Check items validation results
            items_success = True
            if link_schema.get("items") and items_targets_nok:
                items_success = False
                # Add warnings for failed items validation
                items_nok_warnings = [
                    warning
                    for target_id in items_targets_nok
                    for warning in items_warnings_per_target[target_id]
                ]
                rule = MessageRuleEnum.network_items_fail
                msg = (
                    f"Items validation failed for links of type '{link_type}' "
                    f"to {', '.join(items_targets_nok)}"
                )
                if items_targets_ok:
                    msg += f" / ok: {', '.join(items_targets_ok)}"
                if items_targets_nok:
                    msg += f" / nok: {', '.join(items_targets_nok)}"
                warning = {
                    "rule": rule,
                    "severity": get_severity(rule, severity),
                    "validation_message": msg,
                    "need": need,
                    "schema_path": [
                        *schema_path,
                        "validate",
                        "network",
                        link_type,
                        "items",
                    ],
                    "need_path": [*need_path, link_type],
                    "children": items_nok_warnings,  # user is interested in these
                }
                if recurse_level == 0 and user_message is not None:
                    # user message only added to the root validation
                    warning["user_message"] = user_message
                warnings.extend(
                    filter_warnings_severity(config, items_nok_warnings, severity)
                )

            # Check contains validation results
            contains_success = True
            if link_schema.get("contains"):
                contains_warnings: list[OntologyWarning] = []
                contains_cnt_ok = len(contains_targets_ok)
                contains_cnt_nok = len(contains_targets_nok)
                min_contains = 1  # default if minContains is not set
                if "minContains" in link_schema:
                    min_contains = link_schema["minContains"]
                if contains_cnt_ok < min_contains:
                    rule = MessageRuleEnum.network_contains_too_few
                    msg = f"Too few valid links of type '{link_type}' ({contains_cnt_ok} < {min_contains})"
                    if contains_cnt_ok > 0:
                        msg += f" / ok: {', '.join(contains_targets_ok)}"
                    if contains_cnt_nok > 0:
                        msg += f" / nok: {', '.join(contains_targets_nok)}"
                    contains_nok_warnings = [
                        warning
                        for target_id in contains_targets_nok
                        for warning in contains_warnings_per_target[target_id]
                    ]
                    contains_warnings.append(
                        {
                            "rule": rule,
                            "severity": get_severity(rule, severity),
                            "validation_message": msg,
                            "need": need,
                            "schema_path": [
                                *schema_path,
                                "validate",
                                "network",
                                link_type,
                            ],
                            "need_path": [*need_path, link_type],
                            "children": contains_nok_warnings,  # user is interested in these
                        }
                    )
                    if recurse_level and user_message is not None:
                        contains_warnings[-1]["user_message"] = user_message
                    contains_success = False
                if "maxContains" in link_schema:
                    max_contains = link_schema["maxContains"]
                    if contains_cnt_ok > max_contains:
                        rule = MessageRuleEnum.network_contains_too_many
                        msg = f"Too many valid links of type '{link_type}' ({contains_cnt_ok} > {max_contains})"
                        if contains_cnt_ok > 0:
                            msg += f" / ok: {', '.join(contains_targets_ok)}"
                        if contains_cnt_nok > 0:
                            msg += f" / nok: {', '.join(contains_targets_nok)}"
                        contains_warnings.append(
                            {
                                "rule": rule,
                                "severity": get_severity(rule, severity),
                                "validation_message": msg,
                                "need": need,
                                "schema_path": [
                                    *schema_path,
                                    "validate",
                                    "network",
                                    link_type,
                                ],
                                "need_path": [*need_path, link_type],
                                # children not passed, no interest in too much success
                            }
                        )
                        if recurse_level == 0 and user_message is not None:
                            # user message only added to the root validation
                            contains_warnings[-1]["user_message"] = user_message
                        contains_success = False

                filtered_contains_warnings = filter_warnings_severity(
                    config, contains_warnings, severity
                )
                warnings.extend(filtered_contains_warnings)

            # Overall success requires both items and minmax validation to pass
            if not (items_success and contains_success):
                success = False

    return success, warnings


def validate_local_need(
    config: NeedsSphinxConfig,
    need: NeedsInfoType,
    schema: NeedFieldsSchemaType,
) -> ValidateNeedType:
    """
    Validate a single need against a given fields schema.

    :param rule: The validation context rule, e.g. MessageRuleEnum.local_success.
        Can be overridden locally for type coercion errors or schema errors.
    """
    final_schema: NeedFieldsSchemaWithVersionType = {
        "$schema": _schema_version,
        "type": "object",
    }
    if "properties" in schema:
        final_schema["properties"] = schema["properties"]
    if "allOf" in schema:
        final_schema["allOf"] = schema["allOf"]
    if "required" in schema:
        final_schema["required"] = schema["required"]
    if "unevaluatedProperties" in schema:
        final_schema["unevaluatedProperties"] = schema["unevaluatedProperties"]

    reduced_need = reduce_need(config, need, final_schema)
    report: ValidateNeedType = {
        "final_schema": final_schema,
        "reduced_need": reduced_need,
        "messages": [],
    }
    validation_warnings = get_localschema_errors(reduced_need, dict(final_schema))
    if validation_warnings:
        for warning in validation_warnings:
            field = ".".join([str(x) for x in warning.path])
            report_message: ValidateNeedMessageType = {
                "field": field,
                "message": warning.message,
                "schema_path": [str(item) for item in warning.schema_path],
            }
            report["messages"].append(report_message)

    return report


def reduce_need(
    config: NeedsSphinxConfig,
    need: NeedsInfoType,
    json_schema: NeedFieldsSchemaWithVersionType,
) -> dict[str, Any]:
    """
    Reduce a need to its relevant fields for validation in a specific schema context.

    The reduction is required to separated actively set fields from defaults.
    Also internal fields shall be removed, if they are not actively used in the schema.
    This is required to make unevaluatedProperties work as expected which disallows
    additional fields.

    Needs can be reduced in multiple contexts as the need can be primary target of validation
    or it can be a link target which might mean only a single field shall be checked for a
    specific value.

    Fields are kept
    - if they are extra fields and differ from their default value
    - if they are links and the list is not empty
    - if they are part of the user provided schema

    The function coerces extra option strings to their specified JSON schema types:
    -> integer -> int
    -> number -> float
    -> boolean -> bool

    :param need: The need to reduce.
    :param json_schema: The user provided and merged JSON merge.
    :raises ValueError: If a field cannot be coerced to its specified type.
    """
    reduced_need: dict[str, Any] = {}
    schema_properties = get_properties_from_schema(json_schema)
    for field, value in need.items():
        keep = False
        schema_field = _needs_schema[field]

        if schema_field["field_type"] == "extra" and not (
            "default" in schema_field and value == schema_field["default"]
        ):
            # keep explicitly set extra options
            keep = True

        if schema_field["field_type"] == "links" and value:
            # keep non-empty link fields
            keep = True

        if (
            schema_field["field_type"] == "core"
            and field in schema_properties
            and not ("default" in schema_field and value == schema_field["default"])
        ):
            # keep core field, it has no default or differs from the default and
            # is part of the user provided schema
            keep = True

        if keep:
            coerced_value = value
            if schema_field["field_type"] == "extra" and field in config.extra_options:
                option_schema = config.extra_options[field].schema
                if (
                    option_schema is not None
                    and "type" in option_schema
                    and option_schema["type"] != "string"
                ):
                    type_ = option_schema["type"]
                    if not isinstance(value, str):
                        raise TypeCoerceError(
                            f"Field '{field}': cannot coerce '{value}' (type: {type(value)}) to {type_}",
                            field=field,
                        )
                    try:
                        if type_ == "integer":
                            coerced_value = int(value)
                        elif type_ == "number":
                            coerced_value = float(value)
                    except ValueError as exc:
                        raise TypeCoerceError(
                            f"Field '{field}': cannot coerce '{value}' to {type_}",
                            field=field,
                        ) from exc
                    if type_ == "boolean":
                        truthy = {"true", "yes", "y", "on", "1"}
                        falsy = {"false", "no", "n", "off", "0"}
                        if value.lower() in truthy:
                            coerced_value = True
                        elif value.lower() in falsy:
                            coerced_value = False
                        else:
                            raise TypeCoerceError(
                                f"Field '{field}': cannot coerce '{value}' to boolean",
                                field=field,
                            )
            reduced_need[field] = coerced_value

    return reduced_need


class TypeCoerceError(ValueError):
    """Store also the field name for reporting."""

    def __init__(self, message: str, field: str) -> None:
        super().__init__(message)
        self.field = field


def get_localschema_errors(
    need: dict[str, Any], schema: dict[str, Any]
) -> list[ValidationError]:
    """
    Validate a need against a schema and return a list of errors.

    :raises jsonschema_rs.ValidationError: If the schema is invalid cannot be built.
    """
    validator = Draft202012Validator(schema, format_checker=FormatChecker())
    return list(validator.iter_errors(instance=need))


def get_severity(
    rule: MessageRuleEnum, user_severity: SeverityEnum | None = None
) -> SeverityEnum:
    """Get rule severity, select the default severity if not overridden by a schema."""
    if user_severity is not None:
        return user_severity
    return MAP_RULE_DEFAULT_SEVERITY[rule]


def any_not_of_rule(warnings: list[OntologyWarning], rule: MessageRuleEnum) -> bool:
    """
    Check if any warning in the list does not match the given rule.

    :param warnings: List of OntologyWarning objects.
    :param rule: The rule to check against.
    :return: True if any warning does not match the rule, False otherwise.
    """
    return any(warning["rule"] != rule for warning in warnings)


def get_ontology_warnings(
    config: NeedsSphinxConfig,
    need: NeedsInfoType,
    schema: NeedFieldsSchemaType,
    fail_rule: MessageRuleEnum,
    success_rule: MessageRuleEnum,
    schema_path: list[str],
    need_path: list[str],
    user_message: str | None = None,
) -> list[OntologyWarning]:
    warnings: list[OntologyWarning] = []
    warning: OntologyWarning
    try:
        validation_report = validate_local_need(
            config=config,
            need=need,
            schema=schema,
        )
    except TypeCoerceError as exc:
        warning = {
            "rule": MessageRuleEnum.extra_option_type_error,
            "severity": get_severity(MessageRuleEnum.extra_option_type_error),
            "validation_message": str(exc),
            "need": need,
            "schema_path": schema_path,
            "need_path": need_path,
            "field": exc.field,
        }
        if user_message is not None:
            warning["user_message"] = user_message
        warnings.append(warning)
        return warnings
    except ValidationError as exc:
        warning = {
            "rule": MessageRuleEnum.cfg_schema_error,
            "severity": get_severity(MessageRuleEnum.cfg_schema_error),
            "validation_message": str(exc),
            "need": need,
            "schema_path": schema_path,
            "need_path": [need["id"]],
        }
        if user_message is not None:
            warning["user_message"] = user_message
        warnings.append(warning)

    if validation_report["messages"]:
        for msg in validation_report["messages"]:
            warning = {
                "rule": fail_rule,
                "severity": get_severity(fail_rule),
                "validation_message": msg["message"],
                "need": need,
                "reduced_need": validation_report["reduced_need"],
                "final_schema": validation_report["final_schema"],
                "schema_path": [*schema_path, *msg["schema_path"]],
                "need_path": need_path,
                "field": msg["field"],
            }
            if user_message is not None:
                warning["user_message"] = user_message
            warnings.append(warning)
            return warnings
    else:
        warning = {
            "rule": success_rule,
            "severity": get_severity(success_rule),
            "need": need,
            "reduced_need": validation_report["reduced_need"],
            "final_schema": validation_report["final_schema"],
            "schema_path": schema_path,
            "need_path": need_path,
        }
        if user_message is not None:
            warning["user_message"] = user_message
        warnings.append(warning)
    return warnings
