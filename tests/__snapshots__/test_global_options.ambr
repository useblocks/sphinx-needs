# serializer version: 1
# name: test_doc_global_option[test_app0]
  dict({
    'avatar': dict({
      'default': FieldLiteralValue(value=''),
      'predicate_defaults': tuple(
      ),
    }),
    'bad_value_type': dict({
      'default': FieldLiteralValue(value=''),
      'predicate_defaults': tuple(
      ),
    }),
    'closed_at': dict({
      'default': FieldLiteralValue(value=''),
      'predicate_defaults': tuple(
      ),
    }),
    'collapse': dict({
      'default': FieldLiteralValue(value=True),
      'predicate_defaults': tuple(
      ),
    }),
    'completion': dict({
      'default': None,
      'predicate_defaults': tuple(
      ),
    }),
    'constraints': dict({
      'default': FieldLiteralValue(value=[]),
      'predicate_defaults': tuple(
      ),
    }),
    'created_at': dict({
      'default': FieldLiteralValue(value=''),
      'predicate_defaults': tuple(
      ),
    }),
    'duration': dict({
      'default': None,
      'predicate_defaults': tuple(
      ),
    }),
    'hide': dict({
      'default': FieldLiteralValue(value=False),
      'predicate_defaults': tuple(
      ),
    }),
    'id_prefix': dict({
      'default': FieldLiteralValue(value=''),
      'predicate_defaults': tuple(
      ),
    }),
    'layout': dict({
      'default': FieldLiteralValue(value='clean_l'),
      'predicate_defaults': tuple(
      ),
    }),
    'link1': dict({
      'default': LinksLiteralValue(value=['SPEC_1']),
      'predicate_defaults': tuple(
      ),
    }),
    'link2': dict({
      'default': LinksLiteralValue(value=['SPEC_1']),
      'predicate_defaults': tuple(
        tuple(
          'status == "implemented"',
          LinksFunctionArray(value=('SPEC_2', DynamicFunctionParsed(name='copy', args=('link1',), kwargs=()))),
        ),
        tuple(
          'status == "closed"',
          LinksLiteralValue(value=['SPEC_3']),
        ),
      ),
    }),
    'link3': dict({
      'default': LinksLiteralValue(value=[]),
      'predicate_defaults': tuple(
      ),
    }),
    'links': dict({
      'default': LinksLiteralValue(value=[]),
      'predicate_defaults': tuple(
      ),
    }),
    'max_amount': dict({
      'default': FieldLiteralValue(value=''),
      'predicate_defaults': tuple(
      ),
    }),
    'max_content_lines': dict({
      'default': FieldLiteralValue(value=''),
      'predicate_defaults': tuple(
      ),
    }),
    'option_1': dict({
      'default': FieldLiteralValue(value='test_global'),
      'predicate_defaults': tuple(
      ),
    }),
    'option_2': dict({
      'default': FieldFunctionArray(value=(DynamicFunctionParsed(name='copy', args=('id',), kwargs=()),)),
      'predicate_defaults': tuple(
      ),
    }),
    'option_3': dict({
      'default': FieldLiteralValue(value=''),
      'predicate_defaults': tuple(
        tuple(
          'status == "implemented"',
          FieldLiteralValue(value='STATUS_IMPL'),
        ),
      ),
    }),
    'option_4': dict({
      'default': FieldLiteralValue(value='STATUS_UNKNOWN'),
      'predicate_defaults': tuple(
        tuple(
          'status == "closed"',
          FieldLiteralValue(value='STATUS_CLOSED'),
        ),
      ),
    }),
    'option_5': dict({
      'default': FieldLiteralValue(value='final'),
      'predicate_defaults': tuple(
        tuple(
          'status == "implemented"',
          FieldLiteralValue(value='STATUS_IMPL'),
        ),
        tuple(
          'status == "closed"',
          FieldLiteralValue(value='STATUS_CLOSED'),
        ),
      ),
    }),
    'params': dict({
      'default': FieldLiteralValue(value=''),
      'predicate_defaults': tuple(
      ),
    }),
    'parent_needs': dict({
      'default': LinksLiteralValue(value=[]),
      'predicate_defaults': tuple(
      ),
    }),
    'post_template': dict({
      'default': None,
      'predicate_defaults': tuple(
      ),
    }),
    'pre_template': dict({
      'default': None,
      'predicate_defaults': tuple(
      ),
    }),
    'prefix': dict({
      'default': FieldLiteralValue(value=''),
      'predicate_defaults': tuple(
      ),
    }),
    'query': dict({
      'default': FieldLiteralValue(value=''),
      'predicate_defaults': tuple(
      ),
    }),
    'service': dict({
      'default': FieldLiteralValue(value=''),
      'predicate_defaults': tuple(
      ),
    }),
    'specific': dict({
      'default': FieldLiteralValue(value=''),
      'predicate_defaults': tuple(
      ),
    }),
    'status': dict({
      'default': None,
      'predicate_defaults': tuple(
      ),
    }),
    'style': dict({
      'default': None,
      'predicate_defaults': tuple(
      ),
    }),
    'tags': dict({
      'default': FieldLiteralValue(value=['d']),
      'predicate_defaults': tuple(
        tuple(
          'status == "implemented"',
          FieldLiteralValue(value=['a', 'b']),
        ),
        tuple(
          'status == "closed"',
          FieldFunctionArray(value=('c', DynamicFunctionParsed(name='copy', args=('status',), kwargs=()))),
        ),
      ),
    }),
    'template': dict({
      'default': None,
      'predicate_defaults': tuple(
      ),
    }),
    'title': dict({
      'default': None,
      'predicate_defaults': tuple(
      ),
    }),
    'too_many_params': dict({
      'default': FieldLiteralValue(value=''),
      'predicate_defaults': tuple(
      ),
    }),
    'updated_at': dict({
      'default': FieldLiteralValue(value=''),
      'predicate_defaults': tuple(
      ),
    }),
    'url': dict({
      'default': FieldLiteralValue(value=''),
      'predicate_defaults': tuple(
      ),
    }),
    'url_postfix': dict({
      'default': FieldLiteralValue(value=''),
      'predicate_defaults': tuple(
      ),
    }),
    'user': dict({
      'default': FieldLiteralValue(value=''),
      'predicate_defaults': tuple(
      ),
    }),
  })
# ---
# name: test_doc_global_option[test_app0].1
  dict({
    'current_version': '',
    'versions': dict({
      '': dict({
        'needs': dict({
          'SPEC_1': dict({
            'collapse': True,
            'docname': 'index',
            'external_css': 'external_link',
            'id': 'SPEC_1',
            'layout': 'clean_l',
            'lineno': 4,
            'link1': list([
              'SPEC_1',
            ]),
            'link1_back': list([
              'SPEC_1',
              'SPEC_2',
              'SPEC_3',
            ]),
            'link2': list([
              'SPEC_2',
              'SPEC_1',
            ]),
            'link2_back': list([
              'SPEC_1',
              'SPEC_3',
            ]),
            'option_1': 'other',
            'option_2': 'SPEC_1',
            'option_3': 'STATUS_IMPL',
            'option_5': 'STATUS_IMPL',
            'section_name': 'GLOBAL OPTIONS',
            'sections': list([
              'GLOBAL OPTIONS',
            ]),
            'status': 'implemented',
            'tags': list([
              'a',
              'b',
            ]),
            'title': 'Specification 1',
            'type': 'spec',
            'type_name': 'Specification',
          }),
          'SPEC_2': dict({
            'collapse': True,
            'docname': 'index',
            'external_css': 'external_link',
            'id': 'SPEC_2',
            'layout': 'clean_l',
            'lineno': 9,
            'link1': list([
              'SPEC_1',
            ]),
            'link2': list([
              'SPEC_3',
            ]),
            'link2_back': list([
              'SPEC_1',
            ]),
            'option_2': 'SPEC_2',
            'option_4': 'STATUS_CLOSED',
            'option_5': 'STATUS_CLOSED',
            'parent_needs_back': list([
              'SPEC_3',
            ]),
            'section_name': 'GLOBAL OPTIONS',
            'sections': list([
              'GLOBAL OPTIONS',
            ]),
            'status': 'closed',
            'tags': list([
              'c',
              'closed',
            ]),
            'title': 'Specification 2',
            'type': 'spec',
            'type_name': 'Specification',
          }),
          'SPEC_3': dict({
            'docname': 'index',
            'external_css': 'external_link',
            'hide': True,
            'id': 'SPEC_3',
            'layout': 'clean_l',
            'lineno': 13,
            'link1': list([
              'SPEC_1',
            ]),
            'link2': list([
              'SPEC_1',
            ]),
            'link2_back': list([
              'SPEC_2',
            ]),
            'option_2': 'SPEC_3',
            'parent_need': 'SPEC_2',
            'parent_needs': list([
              'SPEC_2',
            ]),
            'section_name': 'GLOBAL OPTIONS',
            'sections': list([
              'GLOBAL OPTIONS',
            ]),
            'status': 'other',
            'tags': list([
              'd',
            ]),
            'title': 'Specification 3',
            'type': 'spec',
            'type_name': 'Specification',
          }),
        }),
        'needs_amount': 3,
        'needs_defaults_removed': True,
        'needs_schema': dict({
          '$schema': 'http://json-schema.org/draft-07/schema#',
          'properties': dict({
            'arch': dict({
              'additionalProperties': dict({
                'type': 'string',
              }),
              'default': dict({
              }),
              'description': 'Mapping of uml key to uml content.',
              'field_type': 'core',
              'type': 'object',
            }),
            'avatar': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'bad_value_type': dict({
              'default': '',
              'description': 'Added by needs_extra_options config',
              'field_type': 'extra',
              'type': 'string',
            }),
            'closed_at': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'collapse': dict({
              'default': False,
              'description': 'Hide the meta-data information of the need.',
              'field_type': 'core',
              'type': 'boolean',
            }),
            'completion': dict({
              'default': None,
              'description': 'Added for needgantt functionality',
              'field_type': 'extra',
              'type': 'integer',
            }),
            'constraints': dict({
              'default': list([
              ]),
              'description': 'List of constraint names, which are defined for this need.',
              'field_type': 'core',
              'items': dict({
                'type': 'string',
              }),
              'type': 'array',
            }),
            'constraints_error': dict({
              'default': None,
              'description': 'An error message set if any constraint failed, and `error_message` field is set in config.',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'constraints_passed': dict({
              'default': True,
              'description': 'True if all constraints passed, False if any failed, None if not yet checked.',
              'field_type': 'core',
              'type': list([
                'boolean',
                'null',
              ]),
            }),
            'constraints_results': dict({
              'additionalProperties': dict({
                'type': 'object',
              }),
              'default': dict({
              }),
              'description': 'Mapping of constraint name, to check name, to result, None if not yet checked.',
              'field_type': 'core',
              'type': list([
                'object',
                'null',
              ]),
            }),
            'content': dict({
              'default': '',
              'description': 'The main content of the need.',
              'field_type': 'core',
              'type': 'string',
            }),
            'created_at': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'docname': dict({
              'default': None,
              'description': 'Name of the document where the need is defined (None if external).',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'doctype': dict({
              'default': '.rst',
              'description': "The markup type of the content, denoted by the suffix of the source file, e.g. '.rst'.",
              'field_type': 'core',
              'type': 'string',
            }),
            'duration': dict({
              'default': None,
              'description': 'Added for needgantt functionality',
              'field_type': 'extra',
              'type': 'integer',
            }),
            'external_css': dict({
              'default': '',
              'description': 'CSS class name, added to the external reference.',
              'field_type': 'core',
              'type': 'string',
            }),
            'external_url': dict({
              'default': None,
              'description': 'URL of the need, if it is an external need.',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'has_dead_links': dict({
              'default': False,
              'description': 'True if any links reference need ids that are not found in the need list.',
              'field_type': 'core',
              'type': 'boolean',
            }),
            'has_forbidden_dead_links': dict({
              'default': False,
              'description': 'True if any links reference need ids that are not found in the need list, and the link type does not allow dead links.',
              'field_type': 'core',
              'type': 'boolean',
            }),
            'hide': dict({
              'default': False,
              'description': 'If true, the need is not rendered.',
              'field_type': 'core',
              'type': 'boolean',
            }),
            'id': dict({
              'description': 'ID of the data.',
              'field_type': 'core',
              'type': 'string',
            }),
            'id_prefix': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'is_external': dict({
              'default': False,
              'description': 'If true, no node is created and need is referencing external url.',
              'field_type': 'core',
              'type': 'boolean',
            }),
            'is_import': dict({
              'default': False,
              'description': 'If true, the need was derived from an import.',
              'field_type': 'core',
              'type': 'boolean',
            }),
            'is_modified': dict({
              'default': False,
              'description': 'Whether the need was modified by needextend.',
              'field_type': 'core',
              'type': 'boolean',
            }),
            'is_need': dict({
              'default': True,
              'description': 'Whether the need is a need.',
              'field_type': 'core',
              'type': 'boolean',
            }),
            'is_part': dict({
              'default': False,
              'description': 'Whether the need is a part.',
              'field_type': 'core',
              'type': 'boolean',
            }),
            'jinja_content': dict({
              'default': False,
              'description': 'Whether the content was pre-processed by jinja.',
              'field_type': 'core',
              'type': 'boolean',
            }),
            'layout': dict({
              'default': None,
              'description': 'Key of the layout, which is used to render the need.',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'lineno': dict({
              'default': None,
              'description': 'Line number where the need is defined (None if external).',
              'field_type': 'core',
              'type': list([
                'integer',
                'null',
              ]),
            }),
            'link1': dict({
              'default': list([
              ]),
              'description': 'Link field',
              'field_type': 'links',
              'items': dict({
                'type': 'string',
              }),
              'type': 'array',
            }),
            'link1_back': dict({
              'default': list([
              ]),
              'description': 'Backlink field',
              'field_type': 'backlinks',
              'items': dict({
                'type': 'string',
              }),
              'type': 'array',
            }),
            'link2': dict({
              'default': list([
              ]),
              'description': 'Link field',
              'field_type': 'links',
              'items': dict({
                'type': 'string',
              }),
              'type': 'array',
            }),
            'link2_back': dict({
              'default': list([
              ]),
              'description': 'Backlink field',
              'field_type': 'backlinks',
              'items': dict({
                'type': 'string',
              }),
              'type': 'array',
            }),
            'link3': dict({
              'default': list([
              ]),
              'description': 'Link field',
              'field_type': 'links',
              'items': dict({
                'type': 'string',
              }),
              'type': 'array',
            }),
            'link3_back': dict({
              'default': list([
              ]),
              'description': 'Backlink field',
              'field_type': 'backlinks',
              'items': dict({
                'type': 'string',
              }),
              'type': 'array',
            }),
            'links': dict({
              'default': list([
              ]),
              'description': 'Link field',
              'field_type': 'links',
              'items': dict({
                'type': 'string',
              }),
              'type': 'array',
            }),
            'links_back': dict({
              'default': list([
              ]),
              'description': 'Backlink field',
              'field_type': 'backlinks',
              'items': dict({
                'type': 'string',
              }),
              'type': 'array',
            }),
            'max_amount': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'max_content_lines': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'modifications': dict({
              'default': 0,
              'description': 'Number of modifications by needextend.',
              'field_type': 'core',
              'type': 'integer',
            }),
            'option_1': dict({
              'default': 'test_global',
              'description': 'Added by needs_extra_options config',
              'field_type': 'extra',
              'type': 'string',
            }),
            'option_2': dict({
              'description': 'Added by needs_extra_options config',
              'field_type': 'extra',
              'type': 'string',
            }),
            'option_3': dict({
              'default': '',
              'description': 'Added by needs_extra_options config',
              'field_type': 'extra',
              'type': 'string',
            }),
            'option_4': dict({
              'default': 'STATUS_UNKNOWN',
              'description': 'Added by needs_extra_options config',
              'field_type': 'extra',
              'type': 'string',
            }),
            'option_5': dict({
              'default': 'final',
              'description': 'Added by needs_extra_options config',
              'field_type': 'extra',
              'type': 'string',
            }),
            'params': dict({
              'default': '',
              'description': 'Added by service open-needs',
              'field_type': 'extra',
              'type': 'string',
            }),
            'parent_need': dict({
              'default': None,
              'description': 'Simply the first parent id.',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'parent_needs': dict({
              'default': list([
              ]),
              'description': 'Link field',
              'field_type': 'links',
              'items': dict({
                'type': 'string',
              }),
              'type': 'array',
            }),
            'parent_needs_back': dict({
              'default': list([
              ]),
              'description': 'Backlink field',
              'field_type': 'backlinks',
              'items': dict({
                'type': 'string',
              }),
              'type': 'array',
            }),
            'parts': dict({
              'additionalProperties': dict({
                'type': 'object',
              }),
              'default': dict({
              }),
              'description': "Mapping of parts, a.k.a. sub-needs, IDs to data that overrides the need's data",
              'field_type': 'core',
              'type': 'object',
            }),
            'post_content': dict({
              'default': None,
              'description': 'Additional content after the need.',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'post_template': dict({
              'default': None,
              'description': 'The template key, if the post_content was created from a jinja template.',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'pre_content': dict({
              'default': None,
              'description': 'Additional content before the need.',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'pre_template': dict({
              'default': None,
              'description': 'The template key, if the pre_content was created from a jinja template.',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'prefix': dict({
              'default': '',
              'description': 'Added by service open-needs',
              'field_type': 'extra',
              'type': 'string',
            }),
            'query': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'section_name': dict({
              'default': None,
              'description': 'Simply the first section.',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'sections': dict({
              'default': list([
              ]),
              'description': 'Sections of the need.',
              'field_type': 'core',
              'items': dict({
                'type': 'string',
              }),
              'type': 'array',
            }),
            'service': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'signature': dict({
              'default': None,
              'description': 'Derived from a docutils desc_name node.',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'specific': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'status': dict({
              'default': None,
              'description': 'Status of the need.',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'style': dict({
              'default': None,
              'description': 'Comma-separated list of CSS classes (all appended by `needs_style_`).',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'tags': dict({
              'default': list([
              ]),
              'description': 'List of tags.',
              'field_type': 'core',
              'items': dict({
                'type': 'string',
              }),
              'type': 'array',
            }),
            'template': dict({
              'default': None,
              'description': 'The template key, if the content was created from a jinja template.',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'title': dict({
              'description': 'Title of the need.',
              'field_type': 'core',
              'type': 'string',
            }),
            'too_many_params': dict({
              'default': '',
              'description': 'Added by needs_extra_options config',
              'field_type': 'extra',
              'type': 'string',
            }),
            'type': dict({
              'default': '',
              'description': 'Type of the need.',
              'field_type': 'core',
              'type': 'string',
            }),
            'type_name': dict({
              'default': '',
              'description': 'Name of the type.',
              'field_type': 'core',
              'type': 'string',
            }),
            'updated_at': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'url': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'url_postfix': dict({
              'default': '',
              'description': 'Added by service open-needs',
              'field_type': 'extra',
              'type': 'string',
            }),
            'user': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
          }),
          'type': 'object',
        }),
      }),
    }),
  })
# ---
