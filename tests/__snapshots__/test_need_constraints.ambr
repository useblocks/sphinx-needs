# name: test_need_constraints[test_app0]
  dict({
    'current_version': '',
    'versions': dict({
      '': dict({
        'filters': dict({
        }),
        'filters_amount': 0,
        'needs': dict({
          'SECURITY_REQ': dict({
            'arch': dict({
            }),
            'avatar': '',
            'closed_at': '',
            'completion': '',
            'constraints': list([
            ]),
            'constraints_passed': True,
            'constraints_results': dict({
            }),
            'content_id': 'SECURITY_REQ',
            'created_at': '',
            'delete': None,
            'description': 'This is a requirement describing OPSEC processes.',
            'docname': 'index',
            'doctype': '.rst',
            'duration': '',
            'external_css': 'external_link',
            'external_url': None,
            'full_title': 'test1',
            'has_dead_links': False,
            'has_forbidden_dead_links': False,
            'id': 'SECURITY_REQ',
            'id_prefix': '',
            'is_external': False,
            'is_modified': False,
            'is_need': True,
            'is_part': False,
            'jinja_content': None,
            'layout': '',
            'links': list([
            ]),
            'max_amount': '',
            'max_content_lines': '',
            'modifications': 0,
            'params': '',
            'parent_need': '',
            'parent_needs': list([
            ]),
            'parts': dict({
            }),
            'post_template': None,
            'pre_template': None,
            'prefix': '',
            'query': '',
            'section_name': 'TEST DOCUMENT NEEDS CONSTRAINTS',
            'sections': list([
              'TEST DOCUMENT NEEDS CONSTRAINTS',
            ]),
            'service': '',
            'signature': '',
            'specific': '',
            'status': None,
            'style': None,
            'tags': list([
            ]),
            'target_id': 'SECURITY_REQ',
            'template': None,
            'title': 'test1',
            'type': 'spec',
            'type_name': 'Specification',
            'updated_at': '',
            'url': '',
            'url_postfix': '',
            'user': '',
          }),
          'SP_109F4': dict({
            'arch': dict({
            }),
            'avatar': '',
            'closed_at': '',
            'completion': '',
            'constraints': list([
              'critical',
            ]),
            'constraints_passed': True,
            'constraints_results': dict({
              'critical': dict({
                'check_0': True,
              }),
            }),
            'content_id': 'SP_109F4',
            'created_at': '',
            'delete': None,
            'description': 'Example of a successful constraint.',
            'docname': 'index',
            'doctype': '.rst',
            'duration': '',
            'external_css': 'external_link',
            'external_url': None,
            'full_title': 'test2',
            'has_dead_links': False,
            'has_forbidden_dead_links': False,
            'id': 'SP_109F4',
            'id_prefix': '',
            'is_external': False,
            'is_modified': False,
            'is_need': True,
            'is_part': False,
            'jinja_content': None,
            'layout': '',
            'links': list([
              'SECURITY_REQ',
            ]),
            'max_amount': '',
            'max_content_lines': '',
            'modifications': 0,
            'params': '',
            'parent_need': '',
            'parent_needs': list([
            ]),
            'parts': dict({
            }),
            'post_template': None,
            'pre_template': None,
            'prefix': '',
            'query': '',
            'section_name': 'TEST DOCUMENT NEEDS CONSTRAINTS',
            'sections': list([
              'TEST DOCUMENT NEEDS CONSTRAINTS',
            ]),
            'service': '',
            'signature': '',
            'specific': '',
            'status': None,
            'style': None,
            'tags': list([
              'critical',
            ]),
            'target_id': 'SP_109F4',
            'template': None,
            'title': 'test2',
            'type': 'spec',
            'type_name': 'Specification',
            'updated_at': '',
            'url': '',
            'url_postfix': '',
            'user': '',
          }),
          'SP_3EBFA': dict({
            'arch': dict({
            }),
            'avatar': '',
            'closed_at': '',
            'completion': '',
            'constraints': list([
              'critical',
            ]),
            'constraints_error': 'need SP_3EBFA does not fulfill CRITICAL constraint, because tags are []',
            'constraints_passed': False,
            'constraints_results': dict({
              'critical': dict({
                'check_0': False,
              }),
            }),
            'content_id': 'SP_3EBFA',
            'created_at': '',
            'delete': None,
            'description': 'Example of a failed constraint.',
            'docname': 'index',
            'doctype': '.rst',
            'duration': '',
            'external_css': 'external_link',
            'external_url': None,
            'full_title': 'test3',
            'has_dead_links': False,
            'has_forbidden_dead_links': False,
            'id': 'SP_3EBFA',
            'id_prefix': '',
            'is_external': False,
            'is_modified': False,
            'is_need': True,
            'is_part': False,
            'jinja_content': None,
            'layout': 'debug',
            'links': list([
              'SECURITY_REQ',
            ]),
            'max_amount': '',
            'max_content_lines': '',
            'modifications': 0,
            'params': '',
            'parent_need': '',
            'parent_needs': list([
            ]),
            'parts': dict({
            }),
            'post_template': None,
            'pre_template': None,
            'prefix': '',
            'query': '',
            'section_name': 'TEST DOCUMENT NEEDS CONSTRAINTS',
            'sections': list([
              'TEST DOCUMENT NEEDS CONSTRAINTS',
            ]),
            'service': '',
            'signature': '',
            'specific': '',
            'status': None,
            'style': 'red_bar',
            'tags': list([
            ]),
            'target_id': 'SP_3EBFA',
            'template': None,
            'title': 'test3',
            'type': 'spec',
            'type_name': 'Specification',
            'updated_at': '',
            'url': '',
            'url_postfix': '',
            'user': '',
          }),
          'SP_CA3FB': dict({
            'arch': dict({
            }),
            'avatar': '',
            'closed_at': '',
            'completion': '',
            'constraints': list([
              'team',
            ]),
            'constraints_passed': False,
            'constraints_results': dict({
              'team': dict({
                'check_0': False,
              }),
            }),
            'content_id': 'SP_CA3FB',
            'created_at': '',
            'delete': None,
            'description': 'Example of a failed constraint with medium severity. Note the style from :ref:`needs_constraint_failed_options`',
            'docname': 'index',
            'doctype': '.rst',
            'duration': '',
            'external_css': 'external_link',
            'external_url': None,
            'full_title': 'FAIL_01',
            'has_dead_links': False,
            'has_forbidden_dead_links': False,
            'id': 'SP_CA3FB',
            'id_prefix': '',
            'is_external': False,
            'is_modified': False,
            'is_need': True,
            'is_part': False,
            'jinja_content': None,
            'layout': '',
            'links': list([
            ]),
            'max_amount': '',
            'max_content_lines': '',
            'modifications': 0,
            'params': '',
            'parent_need': '',
            'parent_needs': list([
            ]),
            'parts': dict({
            }),
            'post_template': None,
            'pre_template': None,
            'prefix': '',
            'query': '',
            'section_name': 'TEST DOCUMENT NEEDS CONSTRAINTS',
            'sections': list([
              'TEST DOCUMENT NEEDS CONSTRAINTS',
            ]),
            'service': '',
            'signature': '',
            'specific': '',
            'status': None,
            'style': 'yellow_bar,',
            'tags': list([
            ]),
            'target_id': 'SP_CA3FB',
            'template': None,
            'title': 'FAIL_01',
            'type': 'spec',
            'type_name': 'Specification',
            'updated_at': '',
            'url': '',
            'url_postfix': '',
            'user': '',
          }),
          'SP_TOO_001': dict({
            'arch': dict({
            }),
            'avatar': '',
            'closed_at': '',
            'completion': '',
            'constraints': list([
            ]),
            'constraints_passed': True,
            'constraints_results': dict({
            }),
            'content_id': 'SP_TOO_001',
            'created_at': '',
            'delete': None,
            'description': 'The Tool awesome shall have a command line interface.',
            'docname': 'index',
            'doctype': '.rst',
            'duration': '',
            'external_css': 'external_link',
            'external_url': None,
            'full_title': 'Command line interface',
            'has_dead_links': False,
            'has_forbidden_dead_links': False,
            'id': 'SP_TOO_001',
            'id_prefix': '',
            'is_external': False,
            'is_modified': False,
            'is_need': True,
            'is_part': False,
            'jinja_content': None,
            'layout': '',
            'links': list([
            ]),
            'max_amount': '',
            'max_content_lines': '',
            'modifications': 0,
            'params': '',
            'parent_need': '',
            'parent_needs': list([
            ]),
            'parts': dict({
            }),
            'post_template': None,
            'pre_template': None,
            'prefix': '',
            'query': '',
            'section_name': 'TEST DOCUMENT NEEDS CONSTRAINTS',
            'sections': list([
              'TEST DOCUMENT NEEDS CONSTRAINTS',
            ]),
            'service': '',
            'signature': '',
            'specific': '',
            'status': 'implemented',
            'style': None,
            'tags': list([
              'test',
              'test2',
            ]),
            'target_id': 'SP_TOO_001',
            'template': None,
            'title': 'Command line interface',
            'type': 'spec',
            'type_name': 'Specification',
            'updated_at': '',
            'url': '',
            'url_postfix': '',
            'user': '',
          }),
          'SP_TOO_002': dict({
            'arch': dict({
            }),
            'avatar': '',
            'closed_at': '',
            'completion': '',
            'constraints': list([
              'critical',
            ]),
            'constraints_error': "need SP_TOO_002 does not fulfill CRITICAL constraint, because tags are ['hello', 'there']",
            'constraints_passed': False,
            'constraints_results': dict({
              'critical': dict({
                'check_0': False,
              }),
            }),
            'content_id': 'SP_TOO_002',
            'created_at': '',
            'delete': None,
            'description': 'asdf',
            'docname': 'index',
            'doctype': '.rst',
            'duration': '',
            'external_css': 'external_link',
            'external_url': None,
            'full_title': 'CLI',
            'has_dead_links': False,
            'has_forbidden_dead_links': False,
            'id': 'SP_TOO_002',
            'id_prefix': '',
            'is_external': False,
            'is_modified': False,
            'is_need': True,
            'is_part': False,
            'jinja_content': None,
            'layout': '',
            'links': list([
            ]),
            'max_amount': '',
            'max_content_lines': '',
            'modifications': 0,
            'params': '',
            'parent_need': '',
            'parent_needs': list([
            ]),
            'parts': dict({
            }),
            'post_template': None,
            'pre_template': None,
            'prefix': '',
            'query': '',
            'section_name': 'TEST DOCUMENT NEEDS CONSTRAINTS',
            'sections': list([
              'TEST DOCUMENT NEEDS CONSTRAINTS',
            ]),
            'service': '',
            'signature': '',
            'specific': '',
            'status': 'dev',
            'style': 'red_bar',
            'tags': list([
              'hello',
              'there',
            ]),
            'target_id': 'SP_TOO_002',
            'template': None,
            'title': 'CLI',
            'type': 'spec',
            'type_name': 'Specification',
            'updated_at': '',
            'url': '',
            'url_postfix': '',
            'user': '',
          }),
          'TEST_STYLE': dict({
            'arch': dict({
            }),
            'avatar': '',
            'closed_at': '',
            'completion': '',
            'constraints': list([
              'critical',
            ]),
            'constraints_error': 'need TEST_STYLE does not fulfill CRITICAL constraint, because tags are []',
            'constraints_passed': False,
            'constraints_results': dict({
              'critical': dict({
                'check_0': False,
              }),
            }),
            'content_id': 'TEST_STYLE',
            'created_at': '',
            'delete': None,
            'description': '',
            'docname': 'style_test',
            'doctype': '.rst',
            'duration': '',
            'external_css': 'external_link',
            'external_url': None,
            'full_title': 'CLI',
            'has_dead_links': False,
            'has_forbidden_dead_links': False,
            'id': 'TEST_STYLE',
            'id_prefix': '',
            'is_external': False,
            'is_modified': False,
            'is_need': True,
            'is_part': False,
            'jinja_content': None,
            'layout': '',
            'links': list([
            ]),
            'max_amount': '',
            'max_content_lines': '',
            'modifications': 0,
            'params': '',
            'parent_need': '',
            'parent_needs': list([
            ]),
            'parts': dict({
            }),
            'post_template': None,
            'pre_template': None,
            'prefix': '',
            'query': '',
            'section_name': 'TEST DOCUMENT NEEDS CONSTRAINTS',
            'sections': list([
              'TEST DOCUMENT NEEDS CONSTRAINTS',
            ]),
            'service': '',
            'signature': '',
            'specific': '',
            'status': None,
            'style': 'red_bar',
            'tags': list([
            ]),
            'target_id': 'TEST_STYLE',
            'template': None,
            'title': 'CLI',
            'type': 'spec',
            'type_name': 'Specification',
            'updated_at': '',
            'url': '',
            'url_postfix': '',
            'user': '',
          }),
          'TEST_STYLE2': dict({
            'arch': dict({
            }),
            'avatar': '',
            'closed_at': '',
            'completion': '',
            'constraints': list([
              'team',
            ]),
            'constraints_passed': False,
            'constraints_results': dict({
              'team': dict({
                'check_0': False,
              }),
            }),
            'content_id': 'TEST_STYLE2',
            'created_at': '',
            'delete': None,
            'description': '',
            'docname': 'style_test',
            'doctype': '.rst',
            'duration': '',
            'external_css': 'external_link',
            'external_url': None,
            'full_title': 'CLI2',
            'has_dead_links': False,
            'has_forbidden_dead_links': False,
            'id': 'TEST_STYLE2',
            'id_prefix': '',
            'is_external': False,
            'is_modified': False,
            'is_need': True,
            'is_part': False,
            'jinja_content': None,
            'layout': '',
            'links': list([
            ]),
            'max_amount': '',
            'max_content_lines': '',
            'modifications': 0,
            'params': '',
            'parent_need': '',
            'parent_needs': list([
            ]),
            'parts': dict({
            }),
            'post_template': None,
            'pre_template': None,
            'prefix': '',
            'query': '',
            'section_name': 'TEST DOCUMENT NEEDS CONSTRAINTS',
            'sections': list([
              'TEST DOCUMENT NEEDS CONSTRAINTS',
            ]),
            'service': '',
            'signature': '',
            'specific': '',
            'status': None,
            'style': 'blue_border, yellow_bar',
            'tags': list([
            ]),
            'target_id': 'TEST_STYLE2',
            'template': None,
            'title': 'CLI2',
            'type': 'spec',
            'type_name': 'Specification',
            'updated_at': '',
            'url': '',
            'url_postfix': '',
            'user': '',
          }),
        }),
        'needs_amount': 8,
        'needs_schema': dict({
          '$schema': 'http://json-schema.org/draft-07/schema#',
          'properties': dict({
            'arch': dict({
              'additionalProperties': dict({
                'type': 'string',
              }),
              'default': dict({
              }),
              'description': 'Mapping of uml key to uml content.',
              'field_type': 'core',
              'type': 'object',
            }),
            'avatar': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'closed_at': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'completion': dict({
              'default': '',
              'description': 'Added for needgantt functionality',
              'field_type': 'extra',
              'type': 'string',
            }),
            'constraints': dict({
              'default': list([
              ]),
              'description': 'List of constraint names, which are defined for this need.',
              'field_type': 'core',
              'items': dict({
                'type': 'string',
              }),
              'type': 'array',
            }),
            'constraints_error': dict({
              'default': '',
              'description': 'An error message set if any constraint failed, and `error_message` field is set in config.',
              'field_type': 'core',
              'type': 'string',
            }),
            'constraints_passed': dict({
              'default': True,
              'description': 'True if all constraints passed, False if any failed, None if not yet checked.',
              'field_type': 'core',
              'type': list([
                'boolean',
                'null',
              ]),
            }),
            'constraints_results': dict({
              'additionalProperties': dict({
                'type': 'object',
              }),
              'default': dict({
              }),
              'description': 'Mapping of constraint name, to check name, to result.',
              'field_type': 'core',
              'type': 'object',
            }),
            'content_id': dict({
              'default': None,
              'description': 'ID of the content node.',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'created_at': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'delete': dict({
              'default': None,
              'description': 'If true, the need is deleted entirely.',
              'field_type': 'core',
              'type': list([
                'boolean',
                'null',
              ]),
            }),
            'docname': dict({
              'default': None,
              'description': 'Name of the document where the need is defined (None if external).',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'doctype': dict({
              'default': '.rst',
              'description': "Type of the document where the need is defined, e.g. '.rst'.",
              'field_type': 'core',
              'type': 'string',
            }),
            'duration': dict({
              'default': '',
              'description': 'Added for needgantt functionality',
              'field_type': 'extra',
              'type': 'string',
            }),
            'external_css': dict({
              'default': '',
              'description': 'CSS class name, added to the external reference.',
              'field_type': 'core',
              'type': 'string',
            }),
            'external_url': dict({
              'default': None,
              'description': 'URL of the need, if it is an external need.',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'full_title': dict({
              'default': '',
              'description': 'Title of the need, of unlimited length.',
              'field_type': 'core',
              'type': 'string',
            }),
            'has_dead_links': dict({
              'default': False,
              'description': 'True if any links reference need ids that are not found in the need list.',
              'field_type': 'core',
              'type': 'boolean',
            }),
            'has_forbidden_dead_links': dict({
              'default': False,
              'description': 'True if any links reference need ids that are not found in the need list, and the link type does not allow dead links.',
              'field_type': 'core',
              'type': 'boolean',
            }),
            'id': dict({
              'description': 'ID of the data.',
              'field_type': 'core',
              'type': 'string',
            }),
            'id_prefix': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'is_external': dict({
              'default': False,
              'description': 'If true, no node is created and need is referencing external url.',
              'field_type': 'core',
              'type': 'boolean',
            }),
            'is_modified': dict({
              'default': False,
              'description': 'Whether the need was modified by needextend.',
              'field_type': 'core',
              'type': 'boolean',
            }),
            'is_need': dict({
              'default': True,
              'description': 'Whether the need is a need.',
              'field_type': 'core',
              'type': 'boolean',
            }),
            'is_part': dict({
              'default': False,
              'description': 'Whether the need is a part.',
              'field_type': 'core',
              'type': 'boolean',
            }),
            'jinja_content': dict({
              'default': None,
              'description': 'Whether the content should be pre-processed by jinja.',
              'field_type': 'core',
              'type': list([
                'boolean',
                'null',
              ]),
            }),
            'layout': dict({
              'default': None,
              'description': 'Key of the layout, which is used to render the need.',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'links': dict({
              'default': list([
              ]),
              'description': 'Link field',
              'field_type': 'links',
              'items': dict({
                'type': 'string',
              }),
              'type': 'array',
            }),
            'max_amount': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'max_content_lines': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'modifications': dict({
              'default': 0,
              'description': 'Number of modifications by needextend.',
              'field_type': 'core',
              'type': 'integer',
            }),
            'params': dict({
              'default': '',
              'description': 'Added by service open-needs',
              'field_type': 'extra',
              'type': 'string',
            }),
            'parent_need': dict({
              'default': '',
              'description': 'Simply the first parent id.',
              'field_type': 'core',
              'type': 'string',
            }),
            'parent_needs': dict({
              'default': list([
              ]),
              'description': 'Link field',
              'field_type': 'links',
              'items': dict({
                'type': 'string',
              }),
              'type': 'array',
            }),
            'parts': dict({
              'additionalProperties': dict({
                'type': 'object',
              }),
              'default': dict({
              }),
              'description': "Mapping of parts, a.k.a. sub-needs, IDs to data that overrides the need's data",
              'field_type': 'core',
              'type': 'object',
            }),
            'post_content': dict({
              'default': '',
              'description': 'Post-content of the need.',
              'field_type': 'core',
              'type': 'string',
            }),
            'post_template': dict({
              'default': None,
              'description': 'Post-template of the need.',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'pre_content': dict({
              'default': '',
              'description': 'Pre-content of the need.',
              'field_type': 'core',
              'type': 'string',
            }),
            'pre_template': dict({
              'default': None,
              'description': 'Pre-template of the need.',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'prefix': dict({
              'default': '',
              'description': 'Added by service open-needs',
              'field_type': 'extra',
              'type': 'string',
            }),
            'query': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'section_name': dict({
              'default': '',
              'description': 'Simply the first section.',
              'field_type': 'core',
              'type': 'string',
            }),
            'sections': dict({
              'default': list([
              ]),
              'description': 'Sections of the need.',
              'field_type': 'core',
              'items': dict({
                'type': 'string',
              }),
              'type': 'array',
            }),
            'service': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'signature': dict({
              'default': '',
              'description': 'Derived from a docutils desc_name node.',
              'field_type': 'core',
              'type': 'string',
            }),
            'specific': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'status': dict({
              'default': None,
              'description': 'Status of the need.',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'style': dict({
              'default': None,
              'description': 'Comma-separated list of CSS classes (all appended by `needs_style_`).',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'tags': dict({
              'default': list([
              ]),
              'description': 'List of tags.',
              'field_type': 'core',
              'items': dict({
                'type': 'string',
              }),
              'type': 'array',
            }),
            'target_id': dict({
              'description': 'ID of the data.',
              'field_type': 'core',
              'type': 'string',
            }),
            'template': dict({
              'default': None,
              'description': 'Template of the need.',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'title': dict({
              'description': 'Title of the need, trimmed to a maximum length.',
              'field_type': 'core',
              'type': 'string',
            }),
            'type': dict({
              'default': '',
              'description': 'Type of the need.',
              'field_type': 'core',
              'type': 'string',
            }),
            'type_name': dict({
              'default': '',
              'description': 'Name of the type.',
              'field_type': 'core',
              'type': 'string',
            }),
            'updated_at': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'url': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'url_postfix': dict({
              'default': '',
              'description': 'Added by service open-needs',
              'field_type': 'extra',
              'type': 'string',
            }),
            'user': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
          }),
          'type': 'object',
        }),
      }),
    }),
  })
# ---
