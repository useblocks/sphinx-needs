# name: test_export_id[test_app0]
  dict({
    'current_version': '1.0',
    'versions': dict({
      '1.0': dict({
        'filters': dict({
          'FLOW_1': dict({
            'amount': 10,
            'export_id': 'FLOW_1',
            'filter': '',
            'origin': 'needflow',
            'status': list([
            ]),
            'tags': list([
            ]),
            'types': list([
            ]),
          }),
          'FLOW_2': dict({
            'amount': 5,
            'export_id': 'FLOW_2',
            'filter': 'is_need is False or type != "story"',
            'origin': 'needflow',
            'status': list([
            ]),
            'tags': list([
            ]),
            'types': list([
            ]),
          }),
          'LIST_1': dict({
            'amount': 10,
            'export_id': 'LIST_1',
            'filter': '',
            'origin': 'needlist',
            'status': list([
            ]),
            'tags': list([
            ]),
            'types': list([
            ]),
          }),
          'TABLE_1': dict({
            'amount': 10,
            'export_id': 'TABLE_1',
            'filter': '',
            'origin': 'needtable',
            'status': list([
            ]),
            'tags': list([
            ]),
            'types': list([
            ]),
          }),
          'TABLE_2': dict({
            'amount': 3,
            'export_id': 'TABLE_2',
            'filter': '"test" in type',
            'origin': 'needtable',
            'status': list([
            ]),
            'tags': list([
            ]),
            'types': list([
            ]),
          }),
        }),
        'filters_amount': 5,
        'needs': dict({
          'REQ_001': dict({
            'arch': dict({
            }),
            'avatar': '',
            'blocks': list([
              'REQ_003',
            ]),
            'closed_at': '',
            'completion': '',
            'constraints': list([
            ]),
            'constraints_passed': True,
            'constraints_results': dict({
            }),
            'content_id': 'REQ_001',
            'created_at': '',
            'delete': None,
            'description': '',
            'docname': 'index',
            'doctype': '.rst',
            'duration': '',
            'external_css': 'external_link',
            'external_url': None,
            'full_title': 'My requirement',
            'has_dead_links': False,
            'has_forbidden_dead_links': False,
            'id': 'REQ_001',
            'id_prefix': '',
            'is_external': False,
            'is_modified': False,
            'is_need': True,
            'is_part': False,
            'jinja_content': None,
            'layout': '',
            'links': list([
              'REQ_002',
              'REQ_004',
              'REQ_003',
            ]),
            'max_amount': '',
            'max_content_lines': '',
            'modifications': 0,
            'params': '',
            'parent_need': '',
            'parent_needs': list([
            ]),
            'parts': dict({
            }),
            'post_template': None,
            'pre_template': None,
            'prefix': '',
            'query': '',
            'section_name': 'Stories',
            'sections': list([
              'Stories',
              'EXTRA LINKS DOCUMENT',
            ]),
            'service': '',
            'signature': '',
            'specific': '',
            'status': None,
            'style': None,
            'tags': list([
            ]),
            'target_id': 'REQ_001',
            'template': None,
            'tests': list([
            ]),
            'title': 'My requirement',
            'type': 'story',
            'type_name': 'User Story',
            'updated_at': '',
            'url': '',
            'url_postfix': '',
            'user': '',
          }),
          'REQ_002': dict({
            'arch': dict({
            }),
            'avatar': '',
            'blocks': list([
            ]),
            'closed_at': '',
            'completion': '',
            'constraints': list([
            ]),
            'constraints_passed': True,
            'constraints_results': dict({
            }),
            'content_id': 'REQ_002',
            'created_at': '',
            'delete': None,
            'description': '',
            'docname': 'index',
            'doctype': '.rst',
            'duration': '',
            'external_css': 'external_link',
            'external_url': None,
            'full_title': 'My requirement 2',
            'has_dead_links': False,
            'has_forbidden_dead_links': False,
            'id': 'REQ_002',
            'id_prefix': '',
            'is_external': False,
            'is_modified': False,
            'is_need': True,
            'is_part': False,
            'jinja_content': None,
            'layout': '',
            'links': list([
            ]),
            'max_amount': '',
            'max_content_lines': '',
            'modifications': 0,
            'params': '',
            'parent_need': '',
            'parent_needs': list([
            ]),
            'parts': dict({
            }),
            'post_template': None,
            'pre_template': None,
            'prefix': '',
            'query': '',
            'section_name': 'Stories',
            'sections': list([
              'Stories',
              'EXTRA LINKS DOCUMENT',
            ]),
            'service': '',
            'signature': '',
            'specific': '',
            'status': None,
            'style': None,
            'tags': list([
            ]),
            'target_id': 'REQ_002',
            'template': None,
            'tests': list([
            ]),
            'title': 'My requirement 2',
            'type': 'story',
            'type_name': 'User Story',
            'updated_at': '',
            'url': '',
            'url_postfix': '',
            'user': '',
          }),
          'REQ_003': dict({
            'arch': dict({
            }),
            'avatar': '',
            'blocks': list([
            ]),
            'closed_at': '',
            'completion': '',
            'constraints': list([
            ]),
            'constraints_passed': True,
            'constraints_results': dict({
            }),
            'content_id': 'REQ_003',
            'created_at': '',
            'delete': None,
            'description': '',
            'docname': 'index',
            'doctype': '.rst',
            'duration': '',
            'external_css': 'external_link',
            'external_url': None,
            'full_title': 'My requirement 3',
            'has_dead_links': False,
            'has_forbidden_dead_links': False,
            'id': 'REQ_003',
            'id_prefix': '',
            'is_external': False,
            'is_modified': False,
            'is_need': True,
            'is_part': False,
            'jinja_content': None,
            'layout': '',
            'links': list([
            ]),
            'max_amount': '',
            'max_content_lines': '',
            'modifications': 0,
            'params': '',
            'parent_need': '',
            'parent_needs': list([
            ]),
            'parts': dict({
            }),
            'post_template': None,
            'pre_template': None,
            'prefix': '',
            'query': '',
            'section_name': 'Stories',
            'sections': list([
              'Stories',
              'EXTRA LINKS DOCUMENT',
            ]),
            'service': '',
            'signature': '',
            'specific': '',
            'status': None,
            'style': None,
            'tags': list([
            ]),
            'target_id': 'REQ_003',
            'template': None,
            'tests': list([
            ]),
            'title': 'My requirement 3',
            'type': 'story',
            'type_name': 'User Story',
            'updated_at': '',
            'url': '',
            'url_postfix': '',
            'user': '',
          }),
          'REQ_004': dict({
            'arch': dict({
            }),
            'avatar': '',
            'blocks': list([
            ]),
            'closed_at': '',
            'completion': '',
            'constraints': list([
            ]),
            'constraints_passed': True,
            'constraints_results': dict({
            }),
            'content_id': 'REQ_004',
            'created_at': '',
            'delete': None,
            'description': '',
            'docname': 'index',
            'doctype': '.rst',
            'duration': '',
            'external_css': 'external_link',
            'external_url': None,
            'full_title': 'My requirement 4',
            'has_dead_links': False,
            'has_forbidden_dead_links': False,
            'id': 'REQ_004',
            'id_prefix': '',
            'is_external': False,
            'is_modified': False,
            'is_need': True,
            'is_part': False,
            'jinja_content': None,
            'layout': '',
            'links': list([
            ]),
            'max_amount': '',
            'max_content_lines': '',
            'modifications': 0,
            'params': '',
            'parent_need': '',
            'parent_needs': list([
            ]),
            'parts': dict({
            }),
            'post_template': None,
            'pre_template': None,
            'prefix': '',
            'query': '',
            'section_name': 'Stories',
            'sections': list([
              'Stories',
              'EXTRA LINKS DOCUMENT',
            ]),
            'service': '',
            'signature': '',
            'specific': '',
            'status': None,
            'style': None,
            'tags': list([
            ]),
            'target_id': 'REQ_004',
            'template': None,
            'tests': list([
            ]),
            'title': 'My requirement 4',
            'type': 'story',
            'type_name': 'User Story',
            'updated_at': '',
            'url': '',
            'url_postfix': '',
            'user': '',
          }),
          'REQ_005': dict({
            'arch': dict({
            }),
            'avatar': '',
            'blocks': list([
              'REQ_001',
            ]),
            'closed_at': '',
            'completion': '',
            'constraints': list([
            ]),
            'constraints_passed': True,
            'constraints_results': dict({
            }),
            'content_id': 'REQ_005',
            'created_at': '',
            'delete': None,
            'description': '''
              :need_part:`(1) awesome part`
              
              :need_part:`(cool) a cool part`
            ''',
            'docname': 'index',
            'doctype': '.rst',
            'duration': '',
            'external_css': 'external_link',
            'external_url': None,
            'full_title': 'Req 5',
            'has_dead_links': False,
            'has_forbidden_dead_links': False,
            'id': 'REQ_005',
            'id_prefix': '',
            'is_external': False,
            'is_modified': False,
            'is_need': True,
            'is_part': False,
            'jinja_content': None,
            'layout': '',
            'links': list([
              'REQ_001',
              'REQ_001',
            ]),
            'max_amount': '',
            'max_content_lines': '',
            'modifications': 0,
            'params': '',
            'parent_need': '',
            'parent_needs': list([
            ]),
            'parts': dict({
              '1': dict({
                'content': ' awesome part',
                'id': '1',
                'links': list([
                ]),
                'links_back': list([
                  'TEST_003',
                ]),
                'tests_back': list([
                  'TEST_003',
                ]),
              }),
              'cool': dict({
                'content': ' a cool part',
                'id': 'cool',
                'links': list([
                ]),
                'links_back': list([
                ]),
                'tests_back': list([
                  'TEST_003',
                ]),
              }),
            }),
            'post_template': None,
            'pre_template': None,
            'prefix': '',
            'query': '',
            'section_name': 'Stories',
            'sections': list([
              'Stories',
              'EXTRA LINKS DOCUMENT',
            ]),
            'service': '',
            'signature': '',
            'specific': '',
            'status': None,
            'style': None,
            'tags': list([
            ]),
            'target_id': 'REQ_005',
            'template': None,
            'tests': list([
            ]),
            'title': 'Req 5',
            'type': 'story',
            'type_name': 'User Story',
            'updated_at': '',
            'url': '',
            'url_postfix': '',
            'user': '',
          }),
          'TEST_001': dict({
            'arch': dict({
            }),
            'avatar': '',
            'blocks': list([
            ]),
            'closed_at': '',
            'completion': '',
            'constraints': list([
            ]),
            'constraints_passed': True,
            'constraints_results': dict({
            }),
            'content_id': 'TEST_001',
            'created_at': '',
            'delete': None,
            'description': '',
            'docname': 'index',
            'doctype': '.rst',
            'duration': '',
            'external_css': 'external_link',
            'external_url': None,
            'full_title': 'Test of requirements',
            'has_dead_links': False,
            'has_forbidden_dead_links': False,
            'id': 'TEST_001',
            'id_prefix': '',
            'is_external': False,
            'is_modified': False,
            'is_need': True,
            'is_part': False,
            'jinja_content': None,
            'layout': '',
            'links': list([
            ]),
            'max_amount': '',
            'max_content_lines': '',
            'modifications': 0,
            'params': '',
            'parent_need': '',
            'parent_needs': list([
            ]),
            'parts': dict({
            }),
            'post_template': None,
            'pre_template': None,
            'prefix': '',
            'query': '',
            'section_name': 'Tests',
            'sections': list([
              'Tests',
              'EXTRA LINKS DOCUMENT',
            ]),
            'service': '',
            'signature': '',
            'specific': '',
            'status': None,
            'style': None,
            'tags': list([
            ]),
            'target_id': 'TEST_001',
            'template': None,
            'tests': list([
              'REQ_001',
              'REQ_003',
            ]),
            'title': 'Test of requirements',
            'type': 'test',
            'type_name': 'Test Case',
            'updated_at': '',
            'url': '',
            'url_postfix': '',
            'user': '',
          }),
          'TEST_002': dict({
            'arch': dict({
            }),
            'avatar': '',
            'blocks': list([
            ]),
            'closed_at': '',
            'completion': '',
            'constraints': list([
            ]),
            'constraints_passed': True,
            'constraints_results': dict({
            }),
            'content_id': 'TEST_002',
            'created_at': '',
            'delete': None,
            'description': '',
            'docname': 'index',
            'doctype': '.rst',
            'duration': '',
            'external_css': 'external_link',
            'external_url': None,
            'full_title': 'Test of requirements2',
            'has_dead_links': False,
            'has_forbidden_dead_links': False,
            'id': 'TEST_002',
            'id_prefix': '',
            'is_external': False,
            'is_modified': False,
            'is_need': True,
            'is_part': False,
            'jinja_content': None,
            'layout': '',
            'links': list([
              'TEST_001',
            ]),
            'max_amount': '',
            'max_content_lines': '',
            'modifications': 0,
            'params': '',
            'parent_need': '',
            'parent_needs': list([
            ]),
            'parts': dict({
            }),
            'post_template': None,
            'pre_template': None,
            'prefix': '',
            'query': '',
            'section_name': 'Tests',
            'sections': list([
              'Tests',
              'EXTRA LINKS DOCUMENT',
            ]),
            'service': '',
            'signature': '',
            'specific': '',
            'status': None,
            'style': None,
            'tags': list([
            ]),
            'target_id': 'TEST_002',
            'template': None,
            'tests': list([
              'REQ_001',
            ]),
            'title': 'Test of requirements2',
            'type': 'test',
            'type_name': 'Test Case',
            'updated_at': '',
            'url': '',
            'url_postfix': '',
            'user': '',
          }),
          'TEST_003': dict({
            'arch': dict({
            }),
            'avatar': '',
            'blocks': list([
            ]),
            'closed_at': '',
            'completion': '',
            'constraints': list([
            ]),
            'constraints_passed': True,
            'constraints_results': dict({
            }),
            'content_id': 'TEST_003',
            'created_at': '',
            'delete': None,
            'description': '',
            'docname': 'index',
            'doctype': '.rst',
            'duration': '',
            'external_css': 'external_link',
            'external_url': None,
            'full_title': 'Test of requirements 5',
            'has_dead_links': False,
            'has_forbidden_dead_links': False,
            'id': 'TEST_003',
            'id_prefix': '',
            'is_external': False,
            'is_modified': False,
            'is_need': True,
            'is_part': False,
            'jinja_content': None,
            'layout': '',
            'links': list([
              'REQ_005.1',
            ]),
            'max_amount': '',
            'max_content_lines': '',
            'modifications': 0,
            'params': '',
            'parent_need': '',
            'parent_needs': list([
            ]),
            'parts': dict({
            }),
            'post_template': None,
            'pre_template': None,
            'prefix': '',
            'query': '',
            'section_name': 'Tests',
            'sections': list([
              'Tests',
              'EXTRA LINKS DOCUMENT',
            ]),
            'service': '',
            'signature': '',
            'specific': '',
            'status': None,
            'style': None,
            'tags': list([
            ]),
            'target_id': 'TEST_003',
            'template': None,
            'tests': list([
              'REQ_005.1',
              'REQ_005.cool',
            ]),
            'title': 'Test of requirements 5',
            'type': 'test',
            'type_name': 'Test Case',
            'updated_at': '',
            'url': '',
            'url_postfix': '',
            'user': '',
          }),
        }),
        'needs_amount': 8,
        'needs_schema': dict({
          '$schema': 'http://json-schema.org/draft-07/schema#',
          'properties': dict({
            'arch': dict({
              'additionalProperties': dict({
                'type': 'string',
              }),
              'default': dict({
              }),
              'description': 'Mapping of uml key to uml content.',
              'field_type': 'core',
              'type': 'object',
            }),
            'avatar': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'blocks': dict({
              'default': list([
              ]),
              'description': 'Link field',
              'field_type': 'links',
              'items': dict({
                'type': 'string',
              }),
              'type': 'array',
            }),
            'closed_at': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'completion': dict({
              'default': '',
              'description': 'Added for needgantt functionality',
              'field_type': 'extra',
              'type': 'string',
            }),
            'constraints': dict({
              'default': list([
              ]),
              'description': 'List of constraint names, which are defined for this need.',
              'field_type': 'core',
              'items': dict({
                'type': 'string',
              }),
              'type': 'array',
            }),
            'constraints_error': dict({
              'default': '',
              'description': 'An error message set if any constraint failed, and `error_message` field is set in config.',
              'field_type': 'core',
              'type': 'string',
            }),
            'constraints_passed': dict({
              'default': True,
              'description': 'True if all constraints passed, False if any failed, None if not yet checked.',
              'field_type': 'core',
              'type': list([
                'boolean',
                'null',
              ]),
            }),
            'constraints_results': dict({
              'additionalProperties': dict({
                'type': 'object',
              }),
              'default': dict({
              }),
              'description': 'Mapping of constraint name, to check name, to result.',
              'field_type': 'core',
              'type': 'object',
            }),
            'content_id': dict({
              'default': None,
              'description': 'ID of the content node.',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'created_at': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'delete': dict({
              'default': None,
              'description': 'If true, the need is deleted entirely.',
              'field_type': 'core',
              'type': list([
                'boolean',
                'null',
              ]),
            }),
            'docname': dict({
              'default': None,
              'description': 'Name of the document where the need is defined (None if external).',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'doctype': dict({
              'default': '.rst',
              'description': "Type of the document where the need is defined, e.g. '.rst'.",
              'field_type': 'core',
              'type': 'string',
            }),
            'duration': dict({
              'default': '',
              'description': 'Added for needgantt functionality',
              'field_type': 'extra',
              'type': 'string',
            }),
            'external_css': dict({
              'default': '',
              'description': 'CSS class name, added to the external reference.',
              'field_type': 'core',
              'type': 'string',
            }),
            'external_url': dict({
              'default': None,
              'description': 'URL of the need, if it is an external need.',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'full_title': dict({
              'default': '',
              'description': 'Title of the need, of unlimited length.',
              'field_type': 'core',
              'type': 'string',
            }),
            'has_dead_links': dict({
              'default': False,
              'description': 'True if any links reference need ids that are not found in the need list.',
              'field_type': 'core',
              'type': 'boolean',
            }),
            'has_forbidden_dead_links': dict({
              'default': False,
              'description': 'True if any links reference need ids that are not found in the need list, and the link type does not allow dead links.',
              'field_type': 'core',
              'type': 'boolean',
            }),
            'id': dict({
              'description': 'ID of the data.',
              'field_type': 'core',
              'type': 'string',
            }),
            'id_prefix': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'is_external': dict({
              'default': False,
              'description': 'If true, no node is created and need is referencing external url.',
              'field_type': 'core',
              'type': 'boolean',
            }),
            'is_modified': dict({
              'default': False,
              'description': 'Whether the need was modified by needextend.',
              'field_type': 'core',
              'type': 'boolean',
            }),
            'is_need': dict({
              'default': True,
              'description': 'Whether the need is a need.',
              'field_type': 'core',
              'type': 'boolean',
            }),
            'is_part': dict({
              'default': False,
              'description': 'Whether the need is a part.',
              'field_type': 'core',
              'type': 'boolean',
            }),
            'jinja_content': dict({
              'default': None,
              'description': 'Whether the content should be pre-processed by jinja.',
              'field_type': 'core',
              'type': list([
                'boolean',
                'null',
              ]),
            }),
            'layout': dict({
              'default': None,
              'description': 'Key of the layout, which is used to render the need.',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'links': dict({
              'default': list([
              ]),
              'description': 'Link field',
              'field_type': 'links',
              'items': dict({
                'type': 'string',
              }),
              'type': 'array',
            }),
            'max_amount': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'max_content_lines': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'modifications': dict({
              'default': 0,
              'description': 'Number of modifications by needextend.',
              'field_type': 'core',
              'type': 'integer',
            }),
            'params': dict({
              'default': '',
              'description': 'Added by service open-needs',
              'field_type': 'extra',
              'type': 'string',
            }),
            'parent_need': dict({
              'default': '',
              'description': 'Simply the first parent id.',
              'field_type': 'core',
              'type': 'string',
            }),
            'parent_needs': dict({
              'default': list([
              ]),
              'description': 'Link field',
              'field_type': 'links',
              'items': dict({
                'type': 'string',
              }),
              'type': 'array',
            }),
            'parts': dict({
              'additionalProperties': dict({
                'type': 'object',
              }),
              'default': dict({
              }),
              'description': "Mapping of parts, a.k.a. sub-needs, IDs to data that overrides the need's data",
              'field_type': 'core',
              'type': 'object',
            }),
            'post_content': dict({
              'default': '',
              'description': 'Post-content of the need.',
              'field_type': 'core',
              'type': 'string',
            }),
            'post_template': dict({
              'default': None,
              'description': 'Post-template of the need.',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'pre_content': dict({
              'default': '',
              'description': 'Pre-content of the need.',
              'field_type': 'core',
              'type': 'string',
            }),
            'pre_template': dict({
              'default': None,
              'description': 'Pre-template of the need.',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'prefix': dict({
              'default': '',
              'description': 'Added by service open-needs',
              'field_type': 'extra',
              'type': 'string',
            }),
            'query': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'section_name': dict({
              'default': '',
              'description': 'Simply the first section.',
              'field_type': 'core',
              'type': 'string',
            }),
            'sections': dict({
              'default': list([
              ]),
              'description': 'Sections of the need.',
              'field_type': 'core',
              'items': dict({
                'type': 'string',
              }),
              'type': 'array',
            }),
            'service': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'signature': dict({
              'default': '',
              'description': 'Derived from a docutils desc_name node.',
              'field_type': 'core',
              'type': 'string',
            }),
            'specific': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'status': dict({
              'default': None,
              'description': 'Status of the need.',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'style': dict({
              'default': None,
              'description': 'Comma-separated list of CSS classes (all appended by `needs_style_`).',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'tags': dict({
              'default': list([
              ]),
              'description': 'List of tags.',
              'field_type': 'core',
              'items': dict({
                'type': 'string',
              }),
              'type': 'array',
            }),
            'target_id': dict({
              'description': 'ID of the data.',
              'field_type': 'core',
              'type': 'string',
            }),
            'template': dict({
              'default': None,
              'description': 'Template of the need.',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'tests': dict({
              'default': list([
              ]),
              'description': 'Link field',
              'field_type': 'links',
              'items': dict({
                'type': 'string',
              }),
              'type': 'array',
            }),
            'title': dict({
              'description': 'Title of the need, trimmed to a maximum length.',
              'field_type': 'core',
              'type': 'string',
            }),
            'type': dict({
              'default': '',
              'description': 'Type of the need.',
              'field_type': 'core',
              'type': 'string',
            }),
            'type_name': dict({
              'default': '',
              'description': 'Name of the type.',
              'field_type': 'core',
              'type': 'string',
            }),
            'updated_at': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'url': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'url_postfix': dict({
              'default': '',
              'description': 'Added by service open-needs',
              'field_type': 'extra',
              'type': 'string',
            }),
            'user': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
          }),
          'type': 'object',
        }),
      }),
    }),
  })
# ---
