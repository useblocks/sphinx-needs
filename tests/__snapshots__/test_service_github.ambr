# name: test_build[test_app0]
  dict({
    'current_version': '1',
    'versions': dict({
      '1': dict({
        'filters': dict({
        }),
        'filters_amount': 0,
        'needs': dict({
          'GITHUB_050bec': dict({
            'arch': dict({
            }),
            'closed_at': '',
            'completion': '',
            'constraints': list([
            ]),
            'constraints_passed': True,
            'constraints_results': dict({
            }),
            'content_id': 'GITHUB_050bec',
            'created_at': '2024-02-15T14:04:06Z',
            'delete': False,
            'description': '''
              Bump actions/cache from 3 to 4 (#1092)
              
              Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
            ''',
            'docname': 'index',
            'doctype': '.rst',
            'duration': '',
            'external_css': 'external_link',
            'external_url': None,
            'full_title': 'Bump actions/cache from 3 to 4 (#1092)',
            'has_dead_links': False,
            'has_forbidden_dead_links': False,
            'id': 'GITHUB_050bec',
            'id_prefix': '',
            'is_external': False,
            'is_modified': False,
            'is_need': True,
            'is_part': False,
            'jinja_content': False,
            'layout': 'github',
            'links': list([
            ]),
            'max_amount': '',
            'max_content_lines': '',
            'modifications': 0,
            'params': '',
            'parent_need': '',
            'parent_needs': list([
            ]),
            'parts': dict({
            }),
            'post_template': None,
            'pre_template': None,
            'prefix': '',
            'query': '',
            'section_name': 'Title',
            'sections': list([
              'Title',
            ]),
            'service': 'github-commits',
            'signature': '',
            'specific': 'useblocks/sphinx-needs/050bec750ff2c5acf881415fa2b5efb5fcce8414',
            'status': None,
            'style': None,
            'tags': list([
            ]),
            'target_id': 'GITHUB_050bec',
            'template': None,
            'title': 'Bump actions/cache from 3 to 4 (#1092)',
            'type': 'commit',
            'type_name': 'Commit',
            'updated_at': '',
            'url': 'https://github.com/useblocks/sphinx-needs/commit/050bec750ff2c5acf881415fa2b5efb5fcce8414',
            'url_postfix': '',
            'user': 'dependabot[bot]',
          }),
          'GITHUB_1110': dict({
            'arch': dict({
            }),
            'closed_at': 'None',
            'completion': '',
            'constraints': list([
            ]),
            'constraints_passed': True,
            'constraints_results': dict({
            }),
            'content_id': 'GITHUB_1110',
            'created_at': '2024-02-15T12:19:11Z',
            'delete': False,
            'description': '''
              .. code-block:: text
              
                 I've also just realised there is a bug in this directive:
              
              
                 [...]
  
            ''',
            'docname': 'index',
            'doctype': '.rst',
            'duration': '',
            'external_css': 'external_link',
            'external_url': None,
            'full_title': 'needreport usage should count needs in post-process',
            'has_dead_links': False,
            'has_forbidden_dead_links': False,
            'id': 'GITHUB_1110',
            'id_prefix': '',
            'is_external': False,
            'is_modified': False,
            'is_need': True,
            'is_part': False,
            'jinja_content': False,
            'layout': 'github',
            'links': list([
            ]),
            'max_amount': '1',
            'max_content_lines': '2',
            'modifications': 0,
            'params': '',
            'parent_need': '',
            'parent_needs': list([
            ]),
            'parts': dict({
            }),
            'post_template': None,
            'pre_template': None,
            'prefix': '',
            'query': 'repo:useblocks/sphinx-needs',
            'section_name': 'Title',
            'sections': list([
              'Title',
            ]),
            'service': 'github-issues',
            'signature': '',
            'specific': '',
            'status': 'open',
            'style': None,
            'tags': list([
              'bug',
            ]),
            'target_id': 'GITHUB_1110',
            'template': None,
            'title': 'needreport usage should count needs in post-process',
            'type': 'issue',
            'type_name': 'Issue',
            'updated_at': '2024-02-15T12:19:30Z',
            'url': 'https://github.com/useblocks/sphinx-needs/issues/1110',
            'url_postfix': '',
            'user': 'chrisjsewell',
          }),
          'GITHUB_1112': dict({
            'arch': dict({
            }),
            'closed_at': 'None',
            'completion': '',
            'constraints': list([
            ]),
            'constraints_passed': True,
            'constraints_results': dict({
            }),
            'content_id': 'GITHUB_1112',
            'created_at': '2024-02-15T20:45:12Z',
            'delete': False,
            'description': '''
              .. code-block:: text
              
                 @David-Le-Nir and @danwos, as I explained in
                 https://github.com/useblocks/sphinx-
                 needs/issues/1103#issuecomment-1936305902, I think this is a
                 better solution for handling need defined  within `only`
                 directives.
              
                 In this first "read" phase, we simply just note all the
                 parent `only` expressions of the need, storing them on an
                 (optional) `only_expressions` field of the need data item.
              
                 If desired, in a subsequent "build" post-processing phase,
                 called from the cached data (once per build), you could then
                 evaluate the `only_expressions` and remove needs as a
                 necessary (or do whatever).
              
                 This logic would go here:
                 https://github.com/useblocks/sphinx-needs/blob/84a5f72f2e72a
                 b1471ab2d1bb5c570d6115ef199/sphinx_needs/directives/need.py#
                 L385
              
                 this is more in-line with the logic of the `only` directive,
                 where everything is cached and parts of the doctree are only
                 removed during the build phase.
              
                 would supercede #1106
              
                 closes #1103
            ''',
            'docname': 'index',
            'doctype': '.rst',
            'duration': '',
            'external_css': 'external_link',
            'external_url': None,
            'full_title': 'ðŸ‘Œ Capture `only` expressions for each need',
            'has_dead_links': False,
            'has_forbidden_dead_links': False,
            'id': 'GITHUB_1112',
            'id_prefix': '',
            'is_external': False,
            'is_modified': False,
            'is_need': True,
            'is_part': False,
            'jinja_content': False,
            'layout': 'github',
            'links': list([
            ]),
            'max_amount': '1',
            'max_content_lines': '',
            'modifications': 0,
            'params': '',
            'parent_need': '',
            'parent_needs': list([
            ]),
            'parts': dict({
            }),
            'post_template': None,
            'pre_template': None,
            'prefix': '',
            'query': 'repo:useblocks/sphinx-needs',
            'section_name': 'Title',
            'sections': list([
              'Title',
            ]),
            'service': 'github-prs',
            'signature': '',
            'specific': '',
            'status': 'open',
            'style': None,
            'tags': list([
            ]),
            'target_id': 'GITHUB_1112',
            'template': None,
            'title': 'ðŸ‘Œ Capture `only` expressions for each need',
            'type': 'pr',
            'type_name': 'PullRequest',
            'updated_at': '2024-02-15T20:55:43Z',
            'url': 'https://github.com/useblocks/sphinx-needs/pull/1112',
            'url_postfix': '',
            'user': 'chrisjsewell',
          }),
          'GITHUB_6abd38': dict({
            'arch': dict({
            }),
            'closed_at': '',
            'completion': '',
            'constraints': list([
            ]),
            'constraints_passed': True,
            'constraints_results': dict({
            }),
            'content_id': 'GITHUB_6abd38',
            'created_at': '2024-02-12T08:36:07.000Z',
            'delete': False,
            'description': '''
              ðŸ§ª Add test for `needreport` directive (#1105)
              
              Currently there is no test for this directive, this PR adds one.
              
              This PR also fixes the directive:
              
              - Make the options flags
              - Change errors in the directive to emit warnings, rather than excepting
              the whole build
              - Allow for `template` to be specified as a directive option
              - Allow the the `dropdown` directive used in the default template, which
              requires an external sphinx extension, to be overriden using
              `needs_render_context = {"report_directive": "admonition"}` (I left the
              default as `dropdown`, so as not to introduce a breaking change)
            ''',
            'docname': 'index',
            'doctype': '.rst',
            'duration': '',
            'external_css': 'external_link',
            'external_url': None,
            'full_title': 'ðŸ§ª Add test for `needreport` directive (#1105)',
            'has_dead_links': False,
            'has_forbidden_dead_links': False,
            'id': 'GITHUB_6abd38',
            'id_prefix': '',
            'is_external': False,
            'is_modified': False,
            'is_need': True,
            'is_part': False,
            'jinja_content': False,
            'layout': 'github',
            'links': list([
            ]),
            'max_amount': '1',
            'max_content_lines': '',
            'modifications': 0,
            'params': '',
            'parent_need': '',
            'parent_needs': list([
            ]),
            'parts': dict({
            }),
            'post_template': None,
            'pre_template': None,
            'prefix': '',
            'query': 'repo:useblocks/sphinx-needs error',
            'section_name': 'Title',
            'sections': list([
              'Title',
            ]),
            'service': 'github-commits',
            'signature': '',
            'specific': '',
            'status': None,
            'style': None,
            'tags': list([
            ]),
            'target_id': 'GITHUB_6abd38',
            'template': None,
            'title': 'ðŸ§ª Add test for `needreport` directive (#1105)',
            'type': 'commit',
            'type_name': 'Commit',
            'updated_at': '',
            'url': 'https://github.com/useblocks/sphinx-needs/commit/6abd389369c5bbd5216f5ecdc3da1323ebe8620d',
            'url_postfix': '',
            'user': 'chrisjsewell',
          }),
        }),
        'needs_amount': 4,
        'needs_schema': dict({
          '$schema': 'http://json-schema.org/draft-07/schema#',
          'properties': dict({
            'arch': dict({
              'additionalProperties': dict({
                'type': 'string',
              }),
              'default': dict({
              }),
              'description': 'Mapping of uml key to uml content.',
              'field_type': 'core',
              'type': 'object',
            }),
            'closed_at': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'completion': dict({
              'default': '',
              'description': 'Added for needgantt functionality',
              'field_type': 'extra',
              'type': 'string',
            }),
            'constraints': dict({
              'default': list([
              ]),
              'description': 'List of constraint names, which are defined for this need.',
              'field_type': 'core',
              'items': dict({
                'type': 'string',
              }),
              'type': 'array',
            }),
            'constraints_error': dict({
              'default': '',
              'description': 'An error message set if any constraint failed, and `error_message` field is set in config.',
              'field_type': 'core',
              'type': 'string',
            }),
            'constraints_passed': dict({
              'default': True,
              'description': 'True if all constraints passed, False if any failed, None if not yet checked.',
              'field_type': 'core',
              'type': list([
                'boolean',
                'null',
              ]),
            }),
            'constraints_results': dict({
              'additionalProperties': dict({
                'type': 'object',
              }),
              'default': dict({
              }),
              'description': 'Mapping of constraint name, to check name, to result.',
              'field_type': 'core',
              'type': 'object',
            }),
            'content_id': dict({
              'default': None,
              'description': 'ID of the content node.',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'created_at': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'delete': dict({
              'default': None,
              'description': 'If true, the need is deleted entirely.',
              'field_type': 'core',
              'type': list([
                'boolean',
                'null',
              ]),
            }),
            'docname': dict({
              'default': None,
              'description': 'Name of the document where the need is defined (None if external).',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'doctype': dict({
              'default': '.rst',
              'description': "Type of the document where the need is defined, e.g. '.rst'.",
              'field_type': 'core',
              'type': 'string',
            }),
            'duration': dict({
              'default': '',
              'description': 'Added for needgantt functionality',
              'field_type': 'extra',
              'type': 'string',
            }),
            'external_css': dict({
              'default': '',
              'description': 'CSS class name, added to the external reference.',
              'field_type': 'core',
              'type': 'string',
            }),
            'external_url': dict({
              'default': None,
              'description': 'URL of the need, if it is an external need.',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'full_title': dict({
              'default': '',
              'description': 'Title of the need, of unlimited length.',
              'field_type': 'core',
              'type': 'string',
            }),
            'has_dead_links': dict({
              'default': False,
              'description': 'True if any links reference need ids that are not found in the need list.',
              'field_type': 'core',
              'type': 'boolean',
            }),
            'has_forbidden_dead_links': dict({
              'default': False,
              'description': 'True if any links reference need ids that are not found in the need list, and the link type does not allow dead links.',
              'field_type': 'core',
              'type': 'boolean',
            }),
            'id': dict({
              'description': 'ID of the data.',
              'field_type': 'core',
              'type': 'string',
            }),
            'id_prefix': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'is_external': dict({
              'default': False,
              'description': 'If true, no node is created and need is referencing external url.',
              'field_type': 'core',
              'type': 'boolean',
            }),
            'is_modified': dict({
              'default': False,
              'description': 'Whether the need was modified by needextend.',
              'field_type': 'core',
              'type': 'boolean',
            }),
            'is_need': dict({
              'default': True,
              'description': 'Whether the need is a need.',
              'field_type': 'core',
              'type': 'boolean',
            }),
            'is_part': dict({
              'default': False,
              'description': 'Whether the need is a part.',
              'field_type': 'core',
              'type': 'boolean',
            }),
            'jinja_content': dict({
              'default': None,
              'description': 'Whether the content should be pre-processed by jinja.',
              'field_type': 'core',
              'type': list([
                'boolean',
                'null',
              ]),
            }),
            'layout': dict({
              'default': None,
              'description': 'Key of the layout, which is used to render the need.',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'links': dict({
              'default': list([
              ]),
              'description': 'Link field',
              'field_type': 'links',
              'items': dict({
                'type': 'string',
              }),
              'type': 'array',
            }),
            'max_amount': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'max_content_lines': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'modifications': dict({
              'default': 0,
              'description': 'Number of modifications by needextend.',
              'field_type': 'core',
              'type': 'integer',
            }),
            'params': dict({
              'default': '',
              'description': 'Added by service open-needs',
              'field_type': 'extra',
              'type': 'string',
            }),
            'parent_need': dict({
              'default': '',
              'description': 'Simply the first parent id.',
              'field_type': 'core',
              'type': 'string',
            }),
            'parent_needs': dict({
              'default': list([
              ]),
              'description': 'Link field',
              'field_type': 'links',
              'items': dict({
                'type': 'string',
              }),
              'type': 'array',
            }),
            'parts': dict({
              'additionalProperties': dict({
                'type': 'object',
              }),
              'default': dict({
              }),
              'description': "Mapping of parts, a.k.a. sub-needs, IDs to data that overrides the need's data",
              'field_type': 'core',
              'type': 'object',
            }),
            'post_content': dict({
              'default': '',
              'description': 'Post-content of the need.',
              'field_type': 'core',
              'type': 'string',
            }),
            'post_template': dict({
              'default': None,
              'description': 'Post-template of the need.',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'pre_content': dict({
              'default': '',
              'description': 'Pre-content of the need.',
              'field_type': 'core',
              'type': 'string',
            }),
            'pre_template': dict({
              'default': None,
              'description': 'Pre-template of the need.',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'prefix': dict({
              'default': '',
              'description': 'Added by service open-needs',
              'field_type': 'extra',
              'type': 'string',
            }),
            'query': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'section_name': dict({
              'default': '',
              'description': 'Simply the first section.',
              'field_type': 'core',
              'type': 'string',
            }),
            'sections': dict({
              'default': list([
              ]),
              'description': 'Sections of the need.',
              'field_type': 'core',
              'items': dict({
                'type': 'string',
              }),
              'type': 'array',
            }),
            'service': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'signature': dict({
              'default': '',
              'description': 'Derived from a docutils desc_name node.',
              'field_type': 'core',
              'type': 'string',
            }),
            'specific': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'status': dict({
              'default': None,
              'description': 'Status of the need.',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'style': dict({
              'default': None,
              'description': 'Comma-separated list of CSS classes (all appended by `needs_style_`).',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'tags': dict({
              'default': list([
              ]),
              'description': 'List of tags.',
              'field_type': 'core',
              'items': dict({
                'type': 'string',
              }),
              'type': 'array',
            }),
            'target_id': dict({
              'description': 'ID of the data.',
              'field_type': 'core',
              'type': 'string',
            }),
            'template': dict({
              'default': None,
              'description': 'Template of the need.',
              'field_type': 'core',
              'type': list([
                'string',
                'null',
              ]),
            }),
            'title': dict({
              'description': 'Title of the need, trimmed to a maximum length.',
              'field_type': 'core',
              'type': 'string',
            }),
            'type': dict({
              'default': '',
              'description': 'Type of the need.',
              'field_type': 'core',
              'type': 'string',
            }),
            'type_name': dict({
              'default': '',
              'description': 'Name of the type.',
              'field_type': 'core',
              'type': 'string',
            }),
            'updated_at': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'url': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
            'url_postfix': dict({
              'default': '',
              'description': 'Added by service open-needs',
              'field_type': 'extra',
              'type': 'string',
            }),
            'user': dict({
              'default': '',
              'description': 'Added by service github-issues',
              'field_type': 'extra',
              'type': 'string',
            }),
          }),
          'type': 'object',
        }),
      }),
    }),
  })
# ---
