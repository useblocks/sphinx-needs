extra_link_array_wrong_type:
  conf: |
    extensions = ["sphinx_needs"]
    needs_from_toml = "ubproject.toml"
  ubproject: |
    [[needs.extra_links]]
    option = "links"
    outgoing = "links"
    incoming = "linked by"
    schema.type = "object"
    schema.minItems = 2
  rst: |
    .. spec:: title
        :id: SPEC_1

    .. impl:: title
        :id: IMPL_1
        :links: SPEC_1
  exception:
    - Schema for extra link 'links' is not valid
    - value of key 'type' of dict is not any of ('array')

missing_type_select:
  conf: |
    extensions = ["sphinx_needs"]
    needs_from_toml = "ubproject.toml"
    needs_schema_definitions_from_json = "schemas.json"
  ubproject: |
    [[needs.extra_options]]
    name = "efforts"
  rst: |
    .. impl:: title
        :id: IMPL_1
        :efforts: 12
  schemas:
    schemas:
      - select:
          properties:
            efforts: {minimum: 15}
        validate:
          local:
            required: [efforts]
  exception:
    - "Schemas entry '[0]' is not valid"
    - "value of key 'select' of dict did not match any element in the union"
    - 'sphinx_needs.schema.config.ExtraOptionStringSchemaType: has unexpected extra key(s): "minimum"'
    - "sphinx_needs.schema.config.ExtraOptionIntegerSchemaType: value of key 'type' is not any of ('integer')"

missing_type_validate_local:
  conf: |
    extensions = ["sphinx_needs"]
    needs_from_toml = "ubproject.toml"
    needs_schema_definitions_from_json = "schemas.json"
  ubproject: |
    [[needs.extra_options]]
    name = "efforts"
  rst: |
    .. impl:: title
        :id: IMPL_1
        :efforts: 12
  schemas:
    schemas:
      - validate:
          local:
            properties:
              efforts: {minimum: 15}
  exception:
    - "Schemas entry '[0]' is not valid"
    - "value of key 'local' of value of key 'validate' of dict did not match any element in the union"
    - 'sphinx_needs.schema.config.ExtraOptionStringSchemaType: has unexpected extra key(s): "minimum"'
    - "sphinx_needs.schema.config.ExtraOptionIntegerSchemaType: value of key 'type' is not any of ('integer')"

type_error:
  conf: |
    extensions = ["sphinx_needs"]
    needs_from_toml = "ubproject.toml"
  ubproject: |
    [[needs.extra_options]]
    name = "efforts"
    schema.type = "unknown"
  rst: |
    .. impl:: title
        :id: IMPL_1
        :efforts: 12
  exception:
    - "Schema for extra option 'efforts' has invalid type: unknown. Allowed types are: string, boolean, integer, number, array"

select_error:
  conf: |
    extensions = ["sphinx_needs"]
    needs_from_toml = "ubproject.toml"
    needs_schema_definitions_from_json = "schemas.json"
  ubproject: |
    [[needs.extra_options]]
    name = "efforts"
  rst: |
    .. impl:: title
        :id: IMPL_1
        :efforts: 12
  schemas:
    schemas:
      - select:
          properties:
            efforts: {type: "unknown"}
  exception:
    - "Config error in schema '[0]': Field 'efforts' has type 'unknown', but expected 'string'."

both_definitions_and_json_given:
  conf: |
    extensions = ["sphinx_needs"]
    needs_from_toml = "ubproject.toml"
    needs_schema_definitions = {
      "schemas": [
          {
              "select": {
                  "properties": {
                      "efforts": {"minimum": 15}
                  }
              },
              "validate": {
                  "local": {
                      "required": ["efforts"]
                  }
              }
          }
      ]
    }
    needs_schema_definitions_from_json = "schemas.json"
  ubproject: |
    [[needs.extra_options]]
    name = "efforts"
  rst: |
    .. impl:: title
        :id: IMPL_1
        :efforts: 12
  schemas:
    schemas:
      - select:
          properties:
            efforts: {minimum: 15}
        validate:
          local:
            required: [efforts]
  exception:
    - "You cannot use both 'needs_schema_definitions' and 'needs_schema_definitions_from_json' at the same time"

local_error:
  conf: |
    extensions = ["sphinx_needs"]
    needs_from_toml = "ubproject.toml"
    needs_schema_definitions_from_json = "schemas.json"
  ubproject: |
    [[needs.extra_options]]
    name = "efforts"
  rst: |
    .. impl:: title
        :id: IMPL_1
        :efforts: 12
  schemas:
    schemas:
      - validate:
          local:
            properties:
              efforts: {type: "unknown"}
  exception:
    - "Config error in schema '[0]': Field 'efforts' has type 'unknown', but expected 'string'."

network_link_not_exist:
  conf: |
    extensions = ["sphinx_needs"]
    needs_schema_definitions_from_json = "schemas.json"
  rst: |
    .. impl:: title
        :id: IMPL_1
  schemas:
    schemas:
      - validate:
          network:
            links2:
              minContains: 2
  exception:
    - "Schema '[0]' defines an unknown network link type 'links2'"

ref_error:
  conf: |
    extensions = ["sphinx_needs"]
    needs_schema_definitions_from_json = "schemas.json"
  rst: |
    .. impl:: title
        :id: IMPL_1
  schemas:
    $defs:
      type-impl:
        properties:
          type:
            const: impl
    schemas:
      - validate:
          local:
            $ref: "#/$defs/not-exist"
  exception:
    - "Reference 'not-exist' not found in definitions"

ref_mixed_error:
  conf: |
    extensions = ["sphinx_needs"]
    needs_schema_definitions_from_json = "schemas.json"
  rst: |
    .. impl:: title
        :id: IMPL_1
  schemas:
    $defs:
      type-impl:
        properties:
          type:
            const: impl
    schemas:
      - validate:
          local:
            $ref: "#/$defs/not-exist"
            required: [type]
  exception:
    - "Invalid $ref entry, expected a single $ref key"
    - "{'$ref': '#/$defs/not-exist', 'required': ['type']}"

ref_recursive:
  conf: |
    extensions = ["sphinx_needs"]
    needs_schema_definitions_from_json = "schemas.json"
  rst: |
    .. impl:: title
        :id: IMPL_1
  schemas:
    $defs:
      type-impl:
        properties:
          type:
            const: impl
        allOf:
          - $ref: "#/$defs/type-impl2"
      type-impl2:
        $ref: "#/$defs/type-impl"

    schemas:
      - validate:
          local:
            $ref: "#/$defs/type-impl"
  exception:
    - "Circular reference detected for 'type-impl'"

extra_option_pattern_unsafe_error:
  conf: |
    extensions = ["sphinx_needs"]
    needs_from_toml = "ubproject.toml"
  ubproject: |
    [[needs.extra_options]]
    name = "efforts"
    schema.type = "string"
    schema.pattern = "^IMPL_(?!SAFE)"
  rst: |
    .. impl:: title
        :id: IMPL_1
  exception:
    - "Unsafe pattern '^IMPL_(?!SAFE)' at 'extra_options.efforts.schema'"
    - "contains lookahead/lookbehind assertions"

extra_link_pattern_unsafe_error:
  conf: |
    extensions = ["sphinx_needs"]
    needs_from_toml = "ubproject.toml"
  ubproject: |
    [[needs.extra_links]]
    option = "links"
    outgoing = "links"
    incoming = "linked by"
    schema.items = { pattern = "^IMPL_(?!SAFE)" }
  rst: |
    .. impl:: title
        :id: IMPL_1
  exception:
    - "Unsafe pattern '^IMPL_(?!SAFE)' at 'extra_links.links.schema.items'"
    - "contains lookahead/lookbehind assertions"

schemas_select_pattern_unsafe_error:
  conf: |
    extensions = ["sphinx_needs"]
    needs_schema_definitions_from_json = "schemas.json"
  rst: |
    .. impl:: title
        :id: IMPL_1
  schemas:
    schemas:
      - select:
          properties:
            id: {pattern: "^IMPL_(?!SAFE)"}
        validate:
          local:
            required: [id]
  exception:
    - "Schemas entry '[0]' is not valid"
    - "Unsafe pattern '^IMPL_(?!SAFE)' at 'schemas.[0].select.properties.id'"
    - "contains lookahead/lookbehind assertions"

schemas_validate_pattern_unsafe_error:
  conf: |
    extensions = ["sphinx_needs"]
    needs_schema_definitions_from_json = "schemas.json"
  rst: |
    .. impl:: title
        :id: IMPL_1
  schemas:
    schemas:
      - validate:
          local:
            properties:
              id:
                pattern: "^IMPL_(?!SAFE)"
  exception:
    - "Schemas entry '[0]' is not valid"
    - "Unsafe pattern '^IMPL_(?!SAFE)' at 'schemas.[0].validate.local.properties.id'"
    - "contains lookahead/lookbehind assertions"

schemas_validate_pattern_backref_error:
  conf: |
    extensions = ["sphinx_needs"]
    needs_schema_definitions_from_json = "schemas.json"
  rst: |
    .. impl:: title
        :id: IMPL_1
  schemas:
    schemas:
      - validate:
          local:
            properties:
              id:
                pattern: "^IMPL_(SAFE)_\\1"
  exception:
    - "Schemas entry '[0]' is not valid"
    - "Unsafe pattern '^IMPL_(SAFE)_\\1' at 'schemas.[0].validate.local.properties.id'"
    - " contains backreferences"

schemas_validate_pattern_nested_quantifiers_error:
  conf: |
    extensions = ["sphinx_needs"]
    needs_schema_definitions_from_json = "schemas.json"
  rst: |
    .. impl:: title
        :id: IMPL_1
  schemas:
    schemas:
      - validate:
          local:
            properties:
              id:
                pattern: "^(a+)+$"
  exception:
    - "Schemas entry '[0]' is not valid"
    - "Unsafe pattern '^(a+)+$' at 'schemas.[0].validate.local.properties.id'"
    - "contains nested quantifiers that may cause backtracking"

schemas_validate_pattern_recursive_error:
  conf: |
    extensions = ["sphinx_needs"]
    needs_schema_definitions_from_json = "schemas.json"
  rst: |
    .. impl:: title
        :id: IMPL_1
  schemas:
    schemas:
      - validate:
          local:
            properties:
              id:
                pattern: "^test(?R)$"
  exception:
    - "Schemas entry '[0]' is not valid"
    - "Unsafe pattern '^test(?R)$' at 'schemas.[0].validate.local.properties.id'"
    - "invalid regex syntax: unknown extension ?R at position 6"

schemas_validate_pattern_possessive_quantifiers_error:
  mark:
    min_python: [3, 11]
  conf: |
    extensions = ["sphinx_needs"]
    needs_schema_definitions_from_json = "schemas.json"
  rst: |
    .. impl:: title
        :id: IMPL_1
  schemas:
    schemas:
      - validate:
          local:
            properties:
              id:
                pattern: "^test*+$"
  exception:
    - "Schemas entry '[0]' is not valid"
    - "Unsafe pattern '^test*+$' at 'schemas.[0].validate.local.properties.id'"
    - "contains possessive quantifiers"

schemas_validate_pattern_atomic_groups_error:
  mark:
    min_python: [3, 11]
  conf: |
    extensions = ["sphinx_needs"]
    needs_schema_definitions_from_json = "schemas.json"
  rst: |
    .. impl:: title
        :id: IMPL_1
  schemas:
    schemas:
      - validate:
          local:
            properties:
              id:
                pattern: "^(?>test)$"
  exception:
    - "Schemas entry '[0]' is not valid"
    - "Unsafe pattern '^(?>test)$' at 'schemas.[0].validate.local.properties.id'"
    - "contains special groups (other than non-capturing)"

schemas_validate_pattern_unicode_property_error:
  conf: |
    extensions = ["sphinx_needs"]
    needs_schema_definitions_from_json = "schemas.json"
  rst: |
    .. impl:: title
        :id: IMPL_1
  schemas:
    schemas:
      - validate:
          local:
            properties:
              id:
                pattern: "^\\p{L}+$"
  exception:
    - "Schemas entry '[0]' is not valid"
    - "Unsafe pattern '^\\p{L}+$' at 'schemas.[0].validate.local.properties.id'"
    - "invalid regex syntax: bad escape \\p at position 1"

schemas_validate_pattern_named_groups_error:
  conf: |
    extensions = ["sphinx_needs"]
    needs_schema_definitions_from_json = "schemas.json"
  rst: |
    .. impl:: title
        :id: IMPL_1
  schemas:
    schemas:
      - validate:
          local:
            properties:
              id:
                pattern: "^(?P<name>test)$"
  exception:
    - "Schemas entry '[0]' is not valid"
    - "Unsafe pattern '^(?P<name>test)$' at 'schemas.[0].validate.local.properties.id'"
    - "contains special groups (other than non-capturing)"

schemas_validate_pattern_unnamed_groups_error:
  conf: |
    extensions = ["sphinx_needs"]
    needs_schema_definitions_from_json = "schemas.json"
  rst: |
    .. impl:: title
        :id: IMPL_1
  schemas:
    schemas:
      - validate:
          local:
            properties:
              id:
                pattern: "^(test)?(?(1)yes|no)$"
  exception:
    - "Schemas entry '[0]' is not valid"
    - "Unsafe pattern '^(test)?(?(1)yes|no)$' at 'schemas.[0].validate.local.properties.id'"
    - "contains special groups (other than non-capturing)"

schemas_validate_pattern_comment_groups_error:
  conf: |
    extensions = ["sphinx_needs"]
    needs_schema_definitions_from_json = "schemas.json"
  rst: |
    .. impl:: title
        :id: IMPL_1
  schemas:
    schemas:
      - validate:
          local:
            properties:
              id:
                pattern: "^test(?#comment)$"
  exception:
    - "Schemas entry '[0]' is not valid"
    - "Unsafe pattern '^test(?#comment)$' at 'schemas.[0].validate.local.properties.id'"
    - "contains special groups (other than non-capturing)"

schemas_validate_pattern_conditional_error:
  conf: |
    extensions = ["sphinx_needs"]
    needs_schema_definitions_from_json = "schemas.json"
  rst: |
    .. impl:: title
        :id: IMPL_1
  schemas:
    schemas:
      - validate:
          local:
            properties:
              id:
                pattern: "^(?(1)yes|no)$"
  exception:
    - "Schemas entry '[0]' is not valid"
    - "Unsafe pattern '^(?(1)yes|no)$' at 'schemas.[0].validate.local.properties.id'"
    - "invalid regex syntax: invalid group reference 1 at position 4"

schemas_validate_pattern_unicode_escapes_error:
  conf: |
    extensions = ["sphinx_needs"]
    needs_schema_definitions_from_json = "schemas.json"
  rst: |
    .. impl:: title
        :id: IMPL_1
  schemas:
    schemas:
      - validate:
          local:
            properties:
              id:
                pattern: "^\\u0041$"
  exception:
    - "Schemas entry '[0]' is not valid"
    - "Unsafe pattern '^\\u0041$' at 'schemas.[0].validate.local.properties.id'"
    - "contains Unicode and control character escapes"

schemas_validate_pattern_subroutine_calls_error:
  conf: |
    extensions = ["sphinx_needs"]
    needs_schema_definitions_from_json = "schemas.json"
  rst: |
    .. impl:: title
        :id: IMPL_1
  schemas:
    schemas:
      - validate:
          local:
            properties:
              id:
                pattern: "^test(?&name)$"
  exception:
    - "Schemas entry '[0]' is not valid"
    - "Unsafe pattern '^test(?&name)$' at 'schemas.[0].validate.local.properties.id'"
    - "invalid regex syntax: unknown extension ?& at position 6"

schemas_validate_pattern_relative_subroutine_error:
  conf: |
    extensions = ["sphinx_needs"]
    needs_schema_definitions_from_json = "schemas.json"
  rst: |
    .. impl:: title
        :id: IMPL_1
  schemas:
    schemas:
      - validate:
          local:
            properties:
              id:
                pattern: "^test(?+1)$"
  exception:
    - "Schemas entry '[0]' is not valid"
    - "Unsafe pattern '^test(?+1)$' at 'schemas.[0].validate.local.properties.id'"
    - "invalid regex syntax: unknown extension ?+ at position 6"
